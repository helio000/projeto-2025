
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model aluno
 * 
 */
export type aluno = $Result.DefaultSelection<Prisma.$alunoPayload>
/**
 * Model matricula
 * 
 */
export type matricula = $Result.DefaultSelection<Prisma.$matriculaPayload>
/**
 * Model professor
 * 
 */
export type professor = $Result.DefaultSelection<Prisma.$professorPayload>
/**
 * Model turma
 * 
 */
export type turma = $Result.DefaultSelection<Prisma.$turmaPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Alunos
 * const alunos = await prisma.aluno.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Alunos
   * const alunos = await prisma.aluno.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.aluno`: Exposes CRUD operations for the **aluno** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Alunos
    * const alunos = await prisma.aluno.findMany()
    * ```
    */
  get aluno(): Prisma.alunoDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.matricula`: Exposes CRUD operations for the **matricula** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Matriculas
    * const matriculas = await prisma.matricula.findMany()
    * ```
    */
  get matricula(): Prisma.matriculaDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.professor`: Exposes CRUD operations for the **professor** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Professors
    * const professors = await prisma.professor.findMany()
    * ```
    */
  get professor(): Prisma.professorDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.turma`: Exposes CRUD operations for the **turma** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Turmas
    * const turmas = await prisma.turma.findMany()
    * ```
    */
  get turma(): Prisma.turmaDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.6.0
   * Query Engine version: f676762280b54cd07c770017ed3711ddde35f37a
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    aluno: 'aluno',
    matricula: 'matricula',
    professor: 'professor',
    turma: 'turma'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "aluno" | "matricula" | "professor" | "turma"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      aluno: {
        payload: Prisma.$alunoPayload<ExtArgs>
        fields: Prisma.alunoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.alunoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$alunoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.alunoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$alunoPayload>
          }
          findFirst: {
            args: Prisma.alunoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$alunoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.alunoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$alunoPayload>
          }
          findMany: {
            args: Prisma.alunoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$alunoPayload>[]
          }
          create: {
            args: Prisma.alunoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$alunoPayload>
          }
          createMany: {
            args: Prisma.alunoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.alunoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$alunoPayload>
          }
          update: {
            args: Prisma.alunoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$alunoPayload>
          }
          deleteMany: {
            args: Prisma.alunoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.alunoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.alunoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$alunoPayload>
          }
          aggregate: {
            args: Prisma.AlunoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAluno>
          }
          groupBy: {
            args: Prisma.alunoGroupByArgs<ExtArgs>
            result: $Utils.Optional<AlunoGroupByOutputType>[]
          }
          count: {
            args: Prisma.alunoCountArgs<ExtArgs>
            result: $Utils.Optional<AlunoCountAggregateOutputType> | number
          }
        }
      }
      matricula: {
        payload: Prisma.$matriculaPayload<ExtArgs>
        fields: Prisma.matriculaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.matriculaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$matriculaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.matriculaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$matriculaPayload>
          }
          findFirst: {
            args: Prisma.matriculaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$matriculaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.matriculaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$matriculaPayload>
          }
          findMany: {
            args: Prisma.matriculaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$matriculaPayload>[]
          }
          create: {
            args: Prisma.matriculaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$matriculaPayload>
          }
          createMany: {
            args: Prisma.matriculaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.matriculaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$matriculaPayload>
          }
          update: {
            args: Prisma.matriculaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$matriculaPayload>
          }
          deleteMany: {
            args: Prisma.matriculaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.matriculaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.matriculaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$matriculaPayload>
          }
          aggregate: {
            args: Prisma.MatriculaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMatricula>
          }
          groupBy: {
            args: Prisma.matriculaGroupByArgs<ExtArgs>
            result: $Utils.Optional<MatriculaGroupByOutputType>[]
          }
          count: {
            args: Prisma.matriculaCountArgs<ExtArgs>
            result: $Utils.Optional<MatriculaCountAggregateOutputType> | number
          }
        }
      }
      professor: {
        payload: Prisma.$professorPayload<ExtArgs>
        fields: Prisma.professorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.professorFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$professorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.professorFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$professorPayload>
          }
          findFirst: {
            args: Prisma.professorFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$professorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.professorFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$professorPayload>
          }
          findMany: {
            args: Prisma.professorFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$professorPayload>[]
          }
          create: {
            args: Prisma.professorCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$professorPayload>
          }
          createMany: {
            args: Prisma.professorCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.professorDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$professorPayload>
          }
          update: {
            args: Prisma.professorUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$professorPayload>
          }
          deleteMany: {
            args: Prisma.professorDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.professorUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.professorUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$professorPayload>
          }
          aggregate: {
            args: Prisma.ProfessorAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProfessor>
          }
          groupBy: {
            args: Prisma.professorGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProfessorGroupByOutputType>[]
          }
          count: {
            args: Prisma.professorCountArgs<ExtArgs>
            result: $Utils.Optional<ProfessorCountAggregateOutputType> | number
          }
        }
      }
      turma: {
        payload: Prisma.$turmaPayload<ExtArgs>
        fields: Prisma.turmaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.turmaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$turmaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.turmaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$turmaPayload>
          }
          findFirst: {
            args: Prisma.turmaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$turmaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.turmaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$turmaPayload>
          }
          findMany: {
            args: Prisma.turmaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$turmaPayload>[]
          }
          create: {
            args: Prisma.turmaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$turmaPayload>
          }
          createMany: {
            args: Prisma.turmaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.turmaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$turmaPayload>
          }
          update: {
            args: Prisma.turmaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$turmaPayload>
          }
          deleteMany: {
            args: Prisma.turmaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.turmaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.turmaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$turmaPayload>
          }
          aggregate: {
            args: Prisma.TurmaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTurma>
          }
          groupBy: {
            args: Prisma.turmaGroupByArgs<ExtArgs>
            result: $Utils.Optional<TurmaGroupByOutputType>[]
          }
          count: {
            args: Prisma.turmaCountArgs<ExtArgs>
            result: $Utils.Optional<TurmaCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    aluno?: alunoOmit
    matricula?: matriculaOmit
    professor?: professorOmit
    turma?: turmaOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type AlunoCountOutputType
   */

  export type AlunoCountOutputType = {
    matricula: number
  }

  export type AlunoCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    matricula?: boolean | AlunoCountOutputTypeCountMatriculaArgs
  }

  // Custom InputTypes
  /**
   * AlunoCountOutputType without action
   */
  export type AlunoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlunoCountOutputType
     */
    select?: AlunoCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AlunoCountOutputType without action
   */
  export type AlunoCountOutputTypeCountMatriculaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: matriculaWhereInput
  }


  /**
   * Count Type ProfessorCountOutputType
   */

  export type ProfessorCountOutputType = {
    turma: number
  }

  export type ProfessorCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    turma?: boolean | ProfessorCountOutputTypeCountTurmaArgs
  }

  // Custom InputTypes
  /**
   * ProfessorCountOutputType without action
   */
  export type ProfessorCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessorCountOutputType
     */
    select?: ProfessorCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProfessorCountOutputType without action
   */
  export type ProfessorCountOutputTypeCountTurmaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: turmaWhereInput
  }


  /**
   * Count Type TurmaCountOutputType
   */

  export type TurmaCountOutputType = {
    matricula: number
  }

  export type TurmaCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    matricula?: boolean | TurmaCountOutputTypeCountMatriculaArgs
  }

  // Custom InputTypes
  /**
   * TurmaCountOutputType without action
   */
  export type TurmaCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TurmaCountOutputType
     */
    select?: TurmaCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TurmaCountOutputType without action
   */
  export type TurmaCountOutputTypeCountMatriculaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: matriculaWhereInput
  }


  /**
   * Models
   */

  /**
   * Model aluno
   */

  export type AggregateAluno = {
    _count: AlunoCountAggregateOutputType | null
    _avg: AlunoAvgAggregateOutputType | null
    _sum: AlunoSumAggregateOutputType | null
    _min: AlunoMinAggregateOutputType | null
    _max: AlunoMaxAggregateOutputType | null
  }

  export type AlunoAvgAggregateOutputType = {
    id: number | null
  }

  export type AlunoSumAggregateOutputType = {
    id: number | null
  }

  export type AlunoMinAggregateOutputType = {
    id: number | null
    nome: string | null
    email: string | null
    telefone: string | null
    datanasc: Date | null
    arteMarcial: string | null
  }

  export type AlunoMaxAggregateOutputType = {
    id: number | null
    nome: string | null
    email: string | null
    telefone: string | null
    datanasc: Date | null
    arteMarcial: string | null
  }

  export type AlunoCountAggregateOutputType = {
    id: number
    nome: number
    email: number
    telefone: number
    datanasc: number
    arteMarcial: number
    _all: number
  }


  export type AlunoAvgAggregateInputType = {
    id?: true
  }

  export type AlunoSumAggregateInputType = {
    id?: true
  }

  export type AlunoMinAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    telefone?: true
    datanasc?: true
    arteMarcial?: true
  }

  export type AlunoMaxAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    telefone?: true
    datanasc?: true
    arteMarcial?: true
  }

  export type AlunoCountAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    telefone?: true
    datanasc?: true
    arteMarcial?: true
    _all?: true
  }

  export type AlunoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which aluno to aggregate.
     */
    where?: alunoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of alunos to fetch.
     */
    orderBy?: alunoOrderByWithRelationInput | alunoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: alunoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` alunos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` alunos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned alunos
    **/
    _count?: true | AlunoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AlunoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AlunoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AlunoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AlunoMaxAggregateInputType
  }

  export type GetAlunoAggregateType<T extends AlunoAggregateArgs> = {
        [P in keyof T & keyof AggregateAluno]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAluno[P]>
      : GetScalarType<T[P], AggregateAluno[P]>
  }




  export type alunoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: alunoWhereInput
    orderBy?: alunoOrderByWithAggregationInput | alunoOrderByWithAggregationInput[]
    by: AlunoScalarFieldEnum[] | AlunoScalarFieldEnum
    having?: alunoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AlunoCountAggregateInputType | true
    _avg?: AlunoAvgAggregateInputType
    _sum?: AlunoSumAggregateInputType
    _min?: AlunoMinAggregateInputType
    _max?: AlunoMaxAggregateInputType
  }

  export type AlunoGroupByOutputType = {
    id: number
    nome: string
    email: string
    telefone: string
    datanasc: Date
    arteMarcial: string
    _count: AlunoCountAggregateOutputType | null
    _avg: AlunoAvgAggregateOutputType | null
    _sum: AlunoSumAggregateOutputType | null
    _min: AlunoMinAggregateOutputType | null
    _max: AlunoMaxAggregateOutputType | null
  }

  type GetAlunoGroupByPayload<T extends alunoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AlunoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AlunoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AlunoGroupByOutputType[P]>
            : GetScalarType<T[P], AlunoGroupByOutputType[P]>
        }
      >
    >


  export type alunoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    email?: boolean
    telefone?: boolean
    datanasc?: boolean
    arteMarcial?: boolean
    matricula?: boolean | aluno$matriculaArgs<ExtArgs>
    _count?: boolean | AlunoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["aluno"]>



  export type alunoSelectScalar = {
    id?: boolean
    nome?: boolean
    email?: boolean
    telefone?: boolean
    datanasc?: boolean
    arteMarcial?: boolean
  }

  export type alunoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nome" | "email" | "telefone" | "datanasc" | "arteMarcial", ExtArgs["result"]["aluno"]>
  export type alunoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    matricula?: boolean | aluno$matriculaArgs<ExtArgs>
    _count?: boolean | AlunoCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $alunoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "aluno"
    objects: {
      matricula: Prisma.$matriculaPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nome: string
      email: string
      telefone: string
      datanasc: Date
      arteMarcial: string
    }, ExtArgs["result"]["aluno"]>
    composites: {}
  }

  type alunoGetPayload<S extends boolean | null | undefined | alunoDefaultArgs> = $Result.GetResult<Prisma.$alunoPayload, S>

  type alunoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<alunoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AlunoCountAggregateInputType | true
    }

  export interface alunoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['aluno'], meta: { name: 'aluno' } }
    /**
     * Find zero or one Aluno that matches the filter.
     * @param {alunoFindUniqueArgs} args - Arguments to find a Aluno
     * @example
     * // Get one Aluno
     * const aluno = await prisma.aluno.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends alunoFindUniqueArgs>(args: SelectSubset<T, alunoFindUniqueArgs<ExtArgs>>): Prisma__alunoClient<$Result.GetResult<Prisma.$alunoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Aluno that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {alunoFindUniqueOrThrowArgs} args - Arguments to find a Aluno
     * @example
     * // Get one Aluno
     * const aluno = await prisma.aluno.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends alunoFindUniqueOrThrowArgs>(args: SelectSubset<T, alunoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__alunoClient<$Result.GetResult<Prisma.$alunoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Aluno that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {alunoFindFirstArgs} args - Arguments to find a Aluno
     * @example
     * // Get one Aluno
     * const aluno = await prisma.aluno.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends alunoFindFirstArgs>(args?: SelectSubset<T, alunoFindFirstArgs<ExtArgs>>): Prisma__alunoClient<$Result.GetResult<Prisma.$alunoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Aluno that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {alunoFindFirstOrThrowArgs} args - Arguments to find a Aluno
     * @example
     * // Get one Aluno
     * const aluno = await prisma.aluno.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends alunoFindFirstOrThrowArgs>(args?: SelectSubset<T, alunoFindFirstOrThrowArgs<ExtArgs>>): Prisma__alunoClient<$Result.GetResult<Prisma.$alunoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Alunos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {alunoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Alunos
     * const alunos = await prisma.aluno.findMany()
     * 
     * // Get first 10 Alunos
     * const alunos = await prisma.aluno.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const alunoWithIdOnly = await prisma.aluno.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends alunoFindManyArgs>(args?: SelectSubset<T, alunoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$alunoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Aluno.
     * @param {alunoCreateArgs} args - Arguments to create a Aluno.
     * @example
     * // Create one Aluno
     * const Aluno = await prisma.aluno.create({
     *   data: {
     *     // ... data to create a Aluno
     *   }
     * })
     * 
     */
    create<T extends alunoCreateArgs>(args: SelectSubset<T, alunoCreateArgs<ExtArgs>>): Prisma__alunoClient<$Result.GetResult<Prisma.$alunoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Alunos.
     * @param {alunoCreateManyArgs} args - Arguments to create many Alunos.
     * @example
     * // Create many Alunos
     * const aluno = await prisma.aluno.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends alunoCreateManyArgs>(args?: SelectSubset<T, alunoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Aluno.
     * @param {alunoDeleteArgs} args - Arguments to delete one Aluno.
     * @example
     * // Delete one Aluno
     * const Aluno = await prisma.aluno.delete({
     *   where: {
     *     // ... filter to delete one Aluno
     *   }
     * })
     * 
     */
    delete<T extends alunoDeleteArgs>(args: SelectSubset<T, alunoDeleteArgs<ExtArgs>>): Prisma__alunoClient<$Result.GetResult<Prisma.$alunoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Aluno.
     * @param {alunoUpdateArgs} args - Arguments to update one Aluno.
     * @example
     * // Update one Aluno
     * const aluno = await prisma.aluno.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends alunoUpdateArgs>(args: SelectSubset<T, alunoUpdateArgs<ExtArgs>>): Prisma__alunoClient<$Result.GetResult<Prisma.$alunoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Alunos.
     * @param {alunoDeleteManyArgs} args - Arguments to filter Alunos to delete.
     * @example
     * // Delete a few Alunos
     * const { count } = await prisma.aluno.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends alunoDeleteManyArgs>(args?: SelectSubset<T, alunoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Alunos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {alunoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Alunos
     * const aluno = await prisma.aluno.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends alunoUpdateManyArgs>(args: SelectSubset<T, alunoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Aluno.
     * @param {alunoUpsertArgs} args - Arguments to update or create a Aluno.
     * @example
     * // Update or create a Aluno
     * const aluno = await prisma.aluno.upsert({
     *   create: {
     *     // ... data to create a Aluno
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Aluno we want to update
     *   }
     * })
     */
    upsert<T extends alunoUpsertArgs>(args: SelectSubset<T, alunoUpsertArgs<ExtArgs>>): Prisma__alunoClient<$Result.GetResult<Prisma.$alunoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Alunos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {alunoCountArgs} args - Arguments to filter Alunos to count.
     * @example
     * // Count the number of Alunos
     * const count = await prisma.aluno.count({
     *   where: {
     *     // ... the filter for the Alunos we want to count
     *   }
     * })
    **/
    count<T extends alunoCountArgs>(
      args?: Subset<T, alunoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AlunoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Aluno.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlunoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AlunoAggregateArgs>(args: Subset<T, AlunoAggregateArgs>): Prisma.PrismaPromise<GetAlunoAggregateType<T>>

    /**
     * Group by Aluno.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {alunoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends alunoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: alunoGroupByArgs['orderBy'] }
        : { orderBy?: alunoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, alunoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAlunoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the aluno model
   */
  readonly fields: alunoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for aluno.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__alunoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    matricula<T extends aluno$matriculaArgs<ExtArgs> = {}>(args?: Subset<T, aluno$matriculaArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$matriculaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the aluno model
   */
  interface alunoFieldRefs {
    readonly id: FieldRef<"aluno", 'Int'>
    readonly nome: FieldRef<"aluno", 'String'>
    readonly email: FieldRef<"aluno", 'String'>
    readonly telefone: FieldRef<"aluno", 'String'>
    readonly datanasc: FieldRef<"aluno", 'DateTime'>
    readonly arteMarcial: FieldRef<"aluno", 'String'>
  }
    

  // Custom InputTypes
  /**
   * aluno findUnique
   */
  export type alunoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the aluno
     */
    select?: alunoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the aluno
     */
    omit?: alunoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: alunoInclude<ExtArgs> | null
    /**
     * Filter, which aluno to fetch.
     */
    where: alunoWhereUniqueInput
  }

  /**
   * aluno findUniqueOrThrow
   */
  export type alunoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the aluno
     */
    select?: alunoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the aluno
     */
    omit?: alunoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: alunoInclude<ExtArgs> | null
    /**
     * Filter, which aluno to fetch.
     */
    where: alunoWhereUniqueInput
  }

  /**
   * aluno findFirst
   */
  export type alunoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the aluno
     */
    select?: alunoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the aluno
     */
    omit?: alunoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: alunoInclude<ExtArgs> | null
    /**
     * Filter, which aluno to fetch.
     */
    where?: alunoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of alunos to fetch.
     */
    orderBy?: alunoOrderByWithRelationInput | alunoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for alunos.
     */
    cursor?: alunoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` alunos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` alunos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of alunos.
     */
    distinct?: AlunoScalarFieldEnum | AlunoScalarFieldEnum[]
  }

  /**
   * aluno findFirstOrThrow
   */
  export type alunoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the aluno
     */
    select?: alunoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the aluno
     */
    omit?: alunoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: alunoInclude<ExtArgs> | null
    /**
     * Filter, which aluno to fetch.
     */
    where?: alunoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of alunos to fetch.
     */
    orderBy?: alunoOrderByWithRelationInput | alunoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for alunos.
     */
    cursor?: alunoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` alunos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` alunos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of alunos.
     */
    distinct?: AlunoScalarFieldEnum | AlunoScalarFieldEnum[]
  }

  /**
   * aluno findMany
   */
  export type alunoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the aluno
     */
    select?: alunoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the aluno
     */
    omit?: alunoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: alunoInclude<ExtArgs> | null
    /**
     * Filter, which alunos to fetch.
     */
    where?: alunoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of alunos to fetch.
     */
    orderBy?: alunoOrderByWithRelationInput | alunoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing alunos.
     */
    cursor?: alunoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` alunos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` alunos.
     */
    skip?: number
    distinct?: AlunoScalarFieldEnum | AlunoScalarFieldEnum[]
  }

  /**
   * aluno create
   */
  export type alunoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the aluno
     */
    select?: alunoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the aluno
     */
    omit?: alunoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: alunoInclude<ExtArgs> | null
    /**
     * The data needed to create a aluno.
     */
    data: XOR<alunoCreateInput, alunoUncheckedCreateInput>
  }

  /**
   * aluno createMany
   */
  export type alunoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many alunos.
     */
    data: alunoCreateManyInput | alunoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * aluno update
   */
  export type alunoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the aluno
     */
    select?: alunoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the aluno
     */
    omit?: alunoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: alunoInclude<ExtArgs> | null
    /**
     * The data needed to update a aluno.
     */
    data: XOR<alunoUpdateInput, alunoUncheckedUpdateInput>
    /**
     * Choose, which aluno to update.
     */
    where: alunoWhereUniqueInput
  }

  /**
   * aluno updateMany
   */
  export type alunoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update alunos.
     */
    data: XOR<alunoUpdateManyMutationInput, alunoUncheckedUpdateManyInput>
    /**
     * Filter which alunos to update
     */
    where?: alunoWhereInput
    /**
     * Limit how many alunos to update.
     */
    limit?: number
  }

  /**
   * aluno upsert
   */
  export type alunoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the aluno
     */
    select?: alunoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the aluno
     */
    omit?: alunoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: alunoInclude<ExtArgs> | null
    /**
     * The filter to search for the aluno to update in case it exists.
     */
    where: alunoWhereUniqueInput
    /**
     * In case the aluno found by the `where` argument doesn't exist, create a new aluno with this data.
     */
    create: XOR<alunoCreateInput, alunoUncheckedCreateInput>
    /**
     * In case the aluno was found with the provided `where` argument, update it with this data.
     */
    update: XOR<alunoUpdateInput, alunoUncheckedUpdateInput>
  }

  /**
   * aluno delete
   */
  export type alunoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the aluno
     */
    select?: alunoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the aluno
     */
    omit?: alunoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: alunoInclude<ExtArgs> | null
    /**
     * Filter which aluno to delete.
     */
    where: alunoWhereUniqueInput
  }

  /**
   * aluno deleteMany
   */
  export type alunoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which alunos to delete
     */
    where?: alunoWhereInput
    /**
     * Limit how many alunos to delete.
     */
    limit?: number
  }

  /**
   * aluno.matricula
   */
  export type aluno$matriculaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the matricula
     */
    select?: matriculaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the matricula
     */
    omit?: matriculaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: matriculaInclude<ExtArgs> | null
    where?: matriculaWhereInput
    orderBy?: matriculaOrderByWithRelationInput | matriculaOrderByWithRelationInput[]
    cursor?: matriculaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MatriculaScalarFieldEnum | MatriculaScalarFieldEnum[]
  }

  /**
   * aluno without action
   */
  export type alunoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the aluno
     */
    select?: alunoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the aluno
     */
    omit?: alunoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: alunoInclude<ExtArgs> | null
  }


  /**
   * Model matricula
   */

  export type AggregateMatricula = {
    _count: MatriculaCountAggregateOutputType | null
    _avg: MatriculaAvgAggregateOutputType | null
    _sum: MatriculaSumAggregateOutputType | null
    _min: MatriculaMinAggregateOutputType | null
    _max: MatriculaMaxAggregateOutputType | null
  }

  export type MatriculaAvgAggregateOutputType = {
    id: number | null
    alunoId: number | null
    turmaId: number | null
  }

  export type MatriculaSumAggregateOutputType = {
    id: number | null
    alunoId: number | null
    turmaId: number | null
  }

  export type MatriculaMinAggregateOutputType = {
    id: number | null
    alunoId: number | null
    turmaId: number | null
    dataMatricula: Date | null
  }

  export type MatriculaMaxAggregateOutputType = {
    id: number | null
    alunoId: number | null
    turmaId: number | null
    dataMatricula: Date | null
  }

  export type MatriculaCountAggregateOutputType = {
    id: number
    alunoId: number
    turmaId: number
    dataMatricula: number
    _all: number
  }


  export type MatriculaAvgAggregateInputType = {
    id?: true
    alunoId?: true
    turmaId?: true
  }

  export type MatriculaSumAggregateInputType = {
    id?: true
    alunoId?: true
    turmaId?: true
  }

  export type MatriculaMinAggregateInputType = {
    id?: true
    alunoId?: true
    turmaId?: true
    dataMatricula?: true
  }

  export type MatriculaMaxAggregateInputType = {
    id?: true
    alunoId?: true
    turmaId?: true
    dataMatricula?: true
  }

  export type MatriculaCountAggregateInputType = {
    id?: true
    alunoId?: true
    turmaId?: true
    dataMatricula?: true
    _all?: true
  }

  export type MatriculaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which matricula to aggregate.
     */
    where?: matriculaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of matriculas to fetch.
     */
    orderBy?: matriculaOrderByWithRelationInput | matriculaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: matriculaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` matriculas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` matriculas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned matriculas
    **/
    _count?: true | MatriculaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MatriculaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MatriculaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MatriculaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MatriculaMaxAggregateInputType
  }

  export type GetMatriculaAggregateType<T extends MatriculaAggregateArgs> = {
        [P in keyof T & keyof AggregateMatricula]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMatricula[P]>
      : GetScalarType<T[P], AggregateMatricula[P]>
  }




  export type matriculaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: matriculaWhereInput
    orderBy?: matriculaOrderByWithAggregationInput | matriculaOrderByWithAggregationInput[]
    by: MatriculaScalarFieldEnum[] | MatriculaScalarFieldEnum
    having?: matriculaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MatriculaCountAggregateInputType | true
    _avg?: MatriculaAvgAggregateInputType
    _sum?: MatriculaSumAggregateInputType
    _min?: MatriculaMinAggregateInputType
    _max?: MatriculaMaxAggregateInputType
  }

  export type MatriculaGroupByOutputType = {
    id: number
    alunoId: number
    turmaId: number
    dataMatricula: Date | null
    _count: MatriculaCountAggregateOutputType | null
    _avg: MatriculaAvgAggregateOutputType | null
    _sum: MatriculaSumAggregateOutputType | null
    _min: MatriculaMinAggregateOutputType | null
    _max: MatriculaMaxAggregateOutputType | null
  }

  type GetMatriculaGroupByPayload<T extends matriculaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MatriculaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MatriculaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MatriculaGroupByOutputType[P]>
            : GetScalarType<T[P], MatriculaGroupByOutputType[P]>
        }
      >
    >


  export type matriculaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    alunoId?: boolean
    turmaId?: boolean
    dataMatricula?: boolean
    aluno?: boolean | alunoDefaultArgs<ExtArgs>
    turma?: boolean | turmaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["matricula"]>



  export type matriculaSelectScalar = {
    id?: boolean
    alunoId?: boolean
    turmaId?: boolean
    dataMatricula?: boolean
  }

  export type matriculaOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "alunoId" | "turmaId" | "dataMatricula", ExtArgs["result"]["matricula"]>
  export type matriculaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    aluno?: boolean | alunoDefaultArgs<ExtArgs>
    turma?: boolean | turmaDefaultArgs<ExtArgs>
  }

  export type $matriculaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "matricula"
    objects: {
      aluno: Prisma.$alunoPayload<ExtArgs>
      turma: Prisma.$turmaPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      alunoId: number
      turmaId: number
      dataMatricula: Date | null
    }, ExtArgs["result"]["matricula"]>
    composites: {}
  }

  type matriculaGetPayload<S extends boolean | null | undefined | matriculaDefaultArgs> = $Result.GetResult<Prisma.$matriculaPayload, S>

  type matriculaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<matriculaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MatriculaCountAggregateInputType | true
    }

  export interface matriculaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['matricula'], meta: { name: 'matricula' } }
    /**
     * Find zero or one Matricula that matches the filter.
     * @param {matriculaFindUniqueArgs} args - Arguments to find a Matricula
     * @example
     * // Get one Matricula
     * const matricula = await prisma.matricula.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends matriculaFindUniqueArgs>(args: SelectSubset<T, matriculaFindUniqueArgs<ExtArgs>>): Prisma__matriculaClient<$Result.GetResult<Prisma.$matriculaPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Matricula that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {matriculaFindUniqueOrThrowArgs} args - Arguments to find a Matricula
     * @example
     * // Get one Matricula
     * const matricula = await prisma.matricula.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends matriculaFindUniqueOrThrowArgs>(args: SelectSubset<T, matriculaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__matriculaClient<$Result.GetResult<Prisma.$matriculaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Matricula that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {matriculaFindFirstArgs} args - Arguments to find a Matricula
     * @example
     * // Get one Matricula
     * const matricula = await prisma.matricula.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends matriculaFindFirstArgs>(args?: SelectSubset<T, matriculaFindFirstArgs<ExtArgs>>): Prisma__matriculaClient<$Result.GetResult<Prisma.$matriculaPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Matricula that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {matriculaFindFirstOrThrowArgs} args - Arguments to find a Matricula
     * @example
     * // Get one Matricula
     * const matricula = await prisma.matricula.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends matriculaFindFirstOrThrowArgs>(args?: SelectSubset<T, matriculaFindFirstOrThrowArgs<ExtArgs>>): Prisma__matriculaClient<$Result.GetResult<Prisma.$matriculaPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Matriculas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {matriculaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Matriculas
     * const matriculas = await prisma.matricula.findMany()
     * 
     * // Get first 10 Matriculas
     * const matriculas = await prisma.matricula.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const matriculaWithIdOnly = await prisma.matricula.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends matriculaFindManyArgs>(args?: SelectSubset<T, matriculaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$matriculaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Matricula.
     * @param {matriculaCreateArgs} args - Arguments to create a Matricula.
     * @example
     * // Create one Matricula
     * const Matricula = await prisma.matricula.create({
     *   data: {
     *     // ... data to create a Matricula
     *   }
     * })
     * 
     */
    create<T extends matriculaCreateArgs>(args: SelectSubset<T, matriculaCreateArgs<ExtArgs>>): Prisma__matriculaClient<$Result.GetResult<Prisma.$matriculaPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Matriculas.
     * @param {matriculaCreateManyArgs} args - Arguments to create many Matriculas.
     * @example
     * // Create many Matriculas
     * const matricula = await prisma.matricula.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends matriculaCreateManyArgs>(args?: SelectSubset<T, matriculaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Matricula.
     * @param {matriculaDeleteArgs} args - Arguments to delete one Matricula.
     * @example
     * // Delete one Matricula
     * const Matricula = await prisma.matricula.delete({
     *   where: {
     *     // ... filter to delete one Matricula
     *   }
     * })
     * 
     */
    delete<T extends matriculaDeleteArgs>(args: SelectSubset<T, matriculaDeleteArgs<ExtArgs>>): Prisma__matriculaClient<$Result.GetResult<Prisma.$matriculaPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Matricula.
     * @param {matriculaUpdateArgs} args - Arguments to update one Matricula.
     * @example
     * // Update one Matricula
     * const matricula = await prisma.matricula.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends matriculaUpdateArgs>(args: SelectSubset<T, matriculaUpdateArgs<ExtArgs>>): Prisma__matriculaClient<$Result.GetResult<Prisma.$matriculaPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Matriculas.
     * @param {matriculaDeleteManyArgs} args - Arguments to filter Matriculas to delete.
     * @example
     * // Delete a few Matriculas
     * const { count } = await prisma.matricula.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends matriculaDeleteManyArgs>(args?: SelectSubset<T, matriculaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Matriculas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {matriculaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Matriculas
     * const matricula = await prisma.matricula.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends matriculaUpdateManyArgs>(args: SelectSubset<T, matriculaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Matricula.
     * @param {matriculaUpsertArgs} args - Arguments to update or create a Matricula.
     * @example
     * // Update or create a Matricula
     * const matricula = await prisma.matricula.upsert({
     *   create: {
     *     // ... data to create a Matricula
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Matricula we want to update
     *   }
     * })
     */
    upsert<T extends matriculaUpsertArgs>(args: SelectSubset<T, matriculaUpsertArgs<ExtArgs>>): Prisma__matriculaClient<$Result.GetResult<Prisma.$matriculaPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Matriculas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {matriculaCountArgs} args - Arguments to filter Matriculas to count.
     * @example
     * // Count the number of Matriculas
     * const count = await prisma.matricula.count({
     *   where: {
     *     // ... the filter for the Matriculas we want to count
     *   }
     * })
    **/
    count<T extends matriculaCountArgs>(
      args?: Subset<T, matriculaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MatriculaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Matricula.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatriculaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MatriculaAggregateArgs>(args: Subset<T, MatriculaAggregateArgs>): Prisma.PrismaPromise<GetMatriculaAggregateType<T>>

    /**
     * Group by Matricula.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {matriculaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends matriculaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: matriculaGroupByArgs['orderBy'] }
        : { orderBy?: matriculaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, matriculaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMatriculaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the matricula model
   */
  readonly fields: matriculaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for matricula.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__matriculaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    aluno<T extends alunoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, alunoDefaultArgs<ExtArgs>>): Prisma__alunoClient<$Result.GetResult<Prisma.$alunoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    turma<T extends turmaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, turmaDefaultArgs<ExtArgs>>): Prisma__turmaClient<$Result.GetResult<Prisma.$turmaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the matricula model
   */
  interface matriculaFieldRefs {
    readonly id: FieldRef<"matricula", 'Int'>
    readonly alunoId: FieldRef<"matricula", 'Int'>
    readonly turmaId: FieldRef<"matricula", 'Int'>
    readonly dataMatricula: FieldRef<"matricula", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * matricula findUnique
   */
  export type matriculaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the matricula
     */
    select?: matriculaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the matricula
     */
    omit?: matriculaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: matriculaInclude<ExtArgs> | null
    /**
     * Filter, which matricula to fetch.
     */
    where: matriculaWhereUniqueInput
  }

  /**
   * matricula findUniqueOrThrow
   */
  export type matriculaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the matricula
     */
    select?: matriculaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the matricula
     */
    omit?: matriculaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: matriculaInclude<ExtArgs> | null
    /**
     * Filter, which matricula to fetch.
     */
    where: matriculaWhereUniqueInput
  }

  /**
   * matricula findFirst
   */
  export type matriculaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the matricula
     */
    select?: matriculaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the matricula
     */
    omit?: matriculaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: matriculaInclude<ExtArgs> | null
    /**
     * Filter, which matricula to fetch.
     */
    where?: matriculaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of matriculas to fetch.
     */
    orderBy?: matriculaOrderByWithRelationInput | matriculaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for matriculas.
     */
    cursor?: matriculaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` matriculas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` matriculas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of matriculas.
     */
    distinct?: MatriculaScalarFieldEnum | MatriculaScalarFieldEnum[]
  }

  /**
   * matricula findFirstOrThrow
   */
  export type matriculaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the matricula
     */
    select?: matriculaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the matricula
     */
    omit?: matriculaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: matriculaInclude<ExtArgs> | null
    /**
     * Filter, which matricula to fetch.
     */
    where?: matriculaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of matriculas to fetch.
     */
    orderBy?: matriculaOrderByWithRelationInput | matriculaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for matriculas.
     */
    cursor?: matriculaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` matriculas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` matriculas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of matriculas.
     */
    distinct?: MatriculaScalarFieldEnum | MatriculaScalarFieldEnum[]
  }

  /**
   * matricula findMany
   */
  export type matriculaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the matricula
     */
    select?: matriculaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the matricula
     */
    omit?: matriculaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: matriculaInclude<ExtArgs> | null
    /**
     * Filter, which matriculas to fetch.
     */
    where?: matriculaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of matriculas to fetch.
     */
    orderBy?: matriculaOrderByWithRelationInput | matriculaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing matriculas.
     */
    cursor?: matriculaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` matriculas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` matriculas.
     */
    skip?: number
    distinct?: MatriculaScalarFieldEnum | MatriculaScalarFieldEnum[]
  }

  /**
   * matricula create
   */
  export type matriculaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the matricula
     */
    select?: matriculaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the matricula
     */
    omit?: matriculaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: matriculaInclude<ExtArgs> | null
    /**
     * The data needed to create a matricula.
     */
    data: XOR<matriculaCreateInput, matriculaUncheckedCreateInput>
  }

  /**
   * matricula createMany
   */
  export type matriculaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many matriculas.
     */
    data: matriculaCreateManyInput | matriculaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * matricula update
   */
  export type matriculaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the matricula
     */
    select?: matriculaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the matricula
     */
    omit?: matriculaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: matriculaInclude<ExtArgs> | null
    /**
     * The data needed to update a matricula.
     */
    data: XOR<matriculaUpdateInput, matriculaUncheckedUpdateInput>
    /**
     * Choose, which matricula to update.
     */
    where: matriculaWhereUniqueInput
  }

  /**
   * matricula updateMany
   */
  export type matriculaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update matriculas.
     */
    data: XOR<matriculaUpdateManyMutationInput, matriculaUncheckedUpdateManyInput>
    /**
     * Filter which matriculas to update
     */
    where?: matriculaWhereInput
    /**
     * Limit how many matriculas to update.
     */
    limit?: number
  }

  /**
   * matricula upsert
   */
  export type matriculaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the matricula
     */
    select?: matriculaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the matricula
     */
    omit?: matriculaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: matriculaInclude<ExtArgs> | null
    /**
     * The filter to search for the matricula to update in case it exists.
     */
    where: matriculaWhereUniqueInput
    /**
     * In case the matricula found by the `where` argument doesn't exist, create a new matricula with this data.
     */
    create: XOR<matriculaCreateInput, matriculaUncheckedCreateInput>
    /**
     * In case the matricula was found with the provided `where` argument, update it with this data.
     */
    update: XOR<matriculaUpdateInput, matriculaUncheckedUpdateInput>
  }

  /**
   * matricula delete
   */
  export type matriculaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the matricula
     */
    select?: matriculaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the matricula
     */
    omit?: matriculaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: matriculaInclude<ExtArgs> | null
    /**
     * Filter which matricula to delete.
     */
    where: matriculaWhereUniqueInput
  }

  /**
   * matricula deleteMany
   */
  export type matriculaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which matriculas to delete
     */
    where?: matriculaWhereInput
    /**
     * Limit how many matriculas to delete.
     */
    limit?: number
  }

  /**
   * matricula without action
   */
  export type matriculaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the matricula
     */
    select?: matriculaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the matricula
     */
    omit?: matriculaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: matriculaInclude<ExtArgs> | null
  }


  /**
   * Model professor
   */

  export type AggregateProfessor = {
    _count: ProfessorCountAggregateOutputType | null
    _avg: ProfessorAvgAggregateOutputType | null
    _sum: ProfessorSumAggregateOutputType | null
    _min: ProfessorMinAggregateOutputType | null
    _max: ProfessorMaxAggregateOutputType | null
  }

  export type ProfessorAvgAggregateOutputType = {
    id: number | null
  }

  export type ProfessorSumAggregateOutputType = {
    id: number | null
  }

  export type ProfessorMinAggregateOutputType = {
    id: number | null
    nome: string | null
    email: string | null
    telefone: string | null
    arteMarcial: string | null
  }

  export type ProfessorMaxAggregateOutputType = {
    id: number | null
    nome: string | null
    email: string | null
    telefone: string | null
    arteMarcial: string | null
  }

  export type ProfessorCountAggregateOutputType = {
    id: number
    nome: number
    email: number
    telefone: number
    arteMarcial: number
    _all: number
  }


  export type ProfessorAvgAggregateInputType = {
    id?: true
  }

  export type ProfessorSumAggregateInputType = {
    id?: true
  }

  export type ProfessorMinAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    telefone?: true
    arteMarcial?: true
  }

  export type ProfessorMaxAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    telefone?: true
    arteMarcial?: true
  }

  export type ProfessorCountAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    telefone?: true
    arteMarcial?: true
    _all?: true
  }

  export type ProfessorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which professor to aggregate.
     */
    where?: professorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of professors to fetch.
     */
    orderBy?: professorOrderByWithRelationInput | professorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: professorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` professors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` professors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned professors
    **/
    _count?: true | ProfessorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProfessorAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProfessorSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProfessorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProfessorMaxAggregateInputType
  }

  export type GetProfessorAggregateType<T extends ProfessorAggregateArgs> = {
        [P in keyof T & keyof AggregateProfessor]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProfessor[P]>
      : GetScalarType<T[P], AggregateProfessor[P]>
  }




  export type professorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: professorWhereInput
    orderBy?: professorOrderByWithAggregationInput | professorOrderByWithAggregationInput[]
    by: ProfessorScalarFieldEnum[] | ProfessorScalarFieldEnum
    having?: professorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProfessorCountAggregateInputType | true
    _avg?: ProfessorAvgAggregateInputType
    _sum?: ProfessorSumAggregateInputType
    _min?: ProfessorMinAggregateInputType
    _max?: ProfessorMaxAggregateInputType
  }

  export type ProfessorGroupByOutputType = {
    id: number
    nome: string
    email: string
    telefone: string | null
    arteMarcial: string | null
    _count: ProfessorCountAggregateOutputType | null
    _avg: ProfessorAvgAggregateOutputType | null
    _sum: ProfessorSumAggregateOutputType | null
    _min: ProfessorMinAggregateOutputType | null
    _max: ProfessorMaxAggregateOutputType | null
  }

  type GetProfessorGroupByPayload<T extends professorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProfessorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProfessorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProfessorGroupByOutputType[P]>
            : GetScalarType<T[P], ProfessorGroupByOutputType[P]>
        }
      >
    >


  export type professorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    email?: boolean
    telefone?: boolean
    arteMarcial?: boolean
    turma?: boolean | professor$turmaArgs<ExtArgs>
    _count?: boolean | ProfessorCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["professor"]>



  export type professorSelectScalar = {
    id?: boolean
    nome?: boolean
    email?: boolean
    telefone?: boolean
    arteMarcial?: boolean
  }

  export type professorOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nome" | "email" | "telefone" | "arteMarcial", ExtArgs["result"]["professor"]>
  export type professorInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    turma?: boolean | professor$turmaArgs<ExtArgs>
    _count?: boolean | ProfessorCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $professorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "professor"
    objects: {
      turma: Prisma.$turmaPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nome: string
      email: string
      telefone: string | null
      arteMarcial: string | null
    }, ExtArgs["result"]["professor"]>
    composites: {}
  }

  type professorGetPayload<S extends boolean | null | undefined | professorDefaultArgs> = $Result.GetResult<Prisma.$professorPayload, S>

  type professorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<professorFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProfessorCountAggregateInputType | true
    }

  export interface professorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['professor'], meta: { name: 'professor' } }
    /**
     * Find zero or one Professor that matches the filter.
     * @param {professorFindUniqueArgs} args - Arguments to find a Professor
     * @example
     * // Get one Professor
     * const professor = await prisma.professor.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends professorFindUniqueArgs>(args: SelectSubset<T, professorFindUniqueArgs<ExtArgs>>): Prisma__professorClient<$Result.GetResult<Prisma.$professorPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Professor that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {professorFindUniqueOrThrowArgs} args - Arguments to find a Professor
     * @example
     * // Get one Professor
     * const professor = await prisma.professor.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends professorFindUniqueOrThrowArgs>(args: SelectSubset<T, professorFindUniqueOrThrowArgs<ExtArgs>>): Prisma__professorClient<$Result.GetResult<Prisma.$professorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Professor that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {professorFindFirstArgs} args - Arguments to find a Professor
     * @example
     * // Get one Professor
     * const professor = await prisma.professor.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends professorFindFirstArgs>(args?: SelectSubset<T, professorFindFirstArgs<ExtArgs>>): Prisma__professorClient<$Result.GetResult<Prisma.$professorPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Professor that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {professorFindFirstOrThrowArgs} args - Arguments to find a Professor
     * @example
     * // Get one Professor
     * const professor = await prisma.professor.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends professorFindFirstOrThrowArgs>(args?: SelectSubset<T, professorFindFirstOrThrowArgs<ExtArgs>>): Prisma__professorClient<$Result.GetResult<Prisma.$professorPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Professors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {professorFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Professors
     * const professors = await prisma.professor.findMany()
     * 
     * // Get first 10 Professors
     * const professors = await prisma.professor.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const professorWithIdOnly = await prisma.professor.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends professorFindManyArgs>(args?: SelectSubset<T, professorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$professorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Professor.
     * @param {professorCreateArgs} args - Arguments to create a Professor.
     * @example
     * // Create one Professor
     * const Professor = await prisma.professor.create({
     *   data: {
     *     // ... data to create a Professor
     *   }
     * })
     * 
     */
    create<T extends professorCreateArgs>(args: SelectSubset<T, professorCreateArgs<ExtArgs>>): Prisma__professorClient<$Result.GetResult<Prisma.$professorPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Professors.
     * @param {professorCreateManyArgs} args - Arguments to create many Professors.
     * @example
     * // Create many Professors
     * const professor = await prisma.professor.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends professorCreateManyArgs>(args?: SelectSubset<T, professorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Professor.
     * @param {professorDeleteArgs} args - Arguments to delete one Professor.
     * @example
     * // Delete one Professor
     * const Professor = await prisma.professor.delete({
     *   where: {
     *     // ... filter to delete one Professor
     *   }
     * })
     * 
     */
    delete<T extends professorDeleteArgs>(args: SelectSubset<T, professorDeleteArgs<ExtArgs>>): Prisma__professorClient<$Result.GetResult<Prisma.$professorPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Professor.
     * @param {professorUpdateArgs} args - Arguments to update one Professor.
     * @example
     * // Update one Professor
     * const professor = await prisma.professor.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends professorUpdateArgs>(args: SelectSubset<T, professorUpdateArgs<ExtArgs>>): Prisma__professorClient<$Result.GetResult<Prisma.$professorPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Professors.
     * @param {professorDeleteManyArgs} args - Arguments to filter Professors to delete.
     * @example
     * // Delete a few Professors
     * const { count } = await prisma.professor.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends professorDeleteManyArgs>(args?: SelectSubset<T, professorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Professors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {professorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Professors
     * const professor = await prisma.professor.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends professorUpdateManyArgs>(args: SelectSubset<T, professorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Professor.
     * @param {professorUpsertArgs} args - Arguments to update or create a Professor.
     * @example
     * // Update or create a Professor
     * const professor = await prisma.professor.upsert({
     *   create: {
     *     // ... data to create a Professor
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Professor we want to update
     *   }
     * })
     */
    upsert<T extends professorUpsertArgs>(args: SelectSubset<T, professorUpsertArgs<ExtArgs>>): Prisma__professorClient<$Result.GetResult<Prisma.$professorPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Professors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {professorCountArgs} args - Arguments to filter Professors to count.
     * @example
     * // Count the number of Professors
     * const count = await prisma.professor.count({
     *   where: {
     *     // ... the filter for the Professors we want to count
     *   }
     * })
    **/
    count<T extends professorCountArgs>(
      args?: Subset<T, professorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProfessorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Professor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProfessorAggregateArgs>(args: Subset<T, ProfessorAggregateArgs>): Prisma.PrismaPromise<GetProfessorAggregateType<T>>

    /**
     * Group by Professor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {professorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends professorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: professorGroupByArgs['orderBy'] }
        : { orderBy?: professorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, professorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProfessorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the professor model
   */
  readonly fields: professorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for professor.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__professorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    turma<T extends professor$turmaArgs<ExtArgs> = {}>(args?: Subset<T, professor$turmaArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$turmaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the professor model
   */
  interface professorFieldRefs {
    readonly id: FieldRef<"professor", 'Int'>
    readonly nome: FieldRef<"professor", 'String'>
    readonly email: FieldRef<"professor", 'String'>
    readonly telefone: FieldRef<"professor", 'String'>
    readonly arteMarcial: FieldRef<"professor", 'String'>
  }
    

  // Custom InputTypes
  /**
   * professor findUnique
   */
  export type professorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the professor
     */
    select?: professorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the professor
     */
    omit?: professorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: professorInclude<ExtArgs> | null
    /**
     * Filter, which professor to fetch.
     */
    where: professorWhereUniqueInput
  }

  /**
   * professor findUniqueOrThrow
   */
  export type professorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the professor
     */
    select?: professorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the professor
     */
    omit?: professorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: professorInclude<ExtArgs> | null
    /**
     * Filter, which professor to fetch.
     */
    where: professorWhereUniqueInput
  }

  /**
   * professor findFirst
   */
  export type professorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the professor
     */
    select?: professorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the professor
     */
    omit?: professorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: professorInclude<ExtArgs> | null
    /**
     * Filter, which professor to fetch.
     */
    where?: professorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of professors to fetch.
     */
    orderBy?: professorOrderByWithRelationInput | professorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for professors.
     */
    cursor?: professorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` professors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` professors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of professors.
     */
    distinct?: ProfessorScalarFieldEnum | ProfessorScalarFieldEnum[]
  }

  /**
   * professor findFirstOrThrow
   */
  export type professorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the professor
     */
    select?: professorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the professor
     */
    omit?: professorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: professorInclude<ExtArgs> | null
    /**
     * Filter, which professor to fetch.
     */
    where?: professorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of professors to fetch.
     */
    orderBy?: professorOrderByWithRelationInput | professorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for professors.
     */
    cursor?: professorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` professors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` professors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of professors.
     */
    distinct?: ProfessorScalarFieldEnum | ProfessorScalarFieldEnum[]
  }

  /**
   * professor findMany
   */
  export type professorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the professor
     */
    select?: professorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the professor
     */
    omit?: professorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: professorInclude<ExtArgs> | null
    /**
     * Filter, which professors to fetch.
     */
    where?: professorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of professors to fetch.
     */
    orderBy?: professorOrderByWithRelationInput | professorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing professors.
     */
    cursor?: professorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` professors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` professors.
     */
    skip?: number
    distinct?: ProfessorScalarFieldEnum | ProfessorScalarFieldEnum[]
  }

  /**
   * professor create
   */
  export type professorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the professor
     */
    select?: professorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the professor
     */
    omit?: professorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: professorInclude<ExtArgs> | null
    /**
     * The data needed to create a professor.
     */
    data: XOR<professorCreateInput, professorUncheckedCreateInput>
  }

  /**
   * professor createMany
   */
  export type professorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many professors.
     */
    data: professorCreateManyInput | professorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * professor update
   */
  export type professorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the professor
     */
    select?: professorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the professor
     */
    omit?: professorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: professorInclude<ExtArgs> | null
    /**
     * The data needed to update a professor.
     */
    data: XOR<professorUpdateInput, professorUncheckedUpdateInput>
    /**
     * Choose, which professor to update.
     */
    where: professorWhereUniqueInput
  }

  /**
   * professor updateMany
   */
  export type professorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update professors.
     */
    data: XOR<professorUpdateManyMutationInput, professorUncheckedUpdateManyInput>
    /**
     * Filter which professors to update
     */
    where?: professorWhereInput
    /**
     * Limit how many professors to update.
     */
    limit?: number
  }

  /**
   * professor upsert
   */
  export type professorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the professor
     */
    select?: professorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the professor
     */
    omit?: professorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: professorInclude<ExtArgs> | null
    /**
     * The filter to search for the professor to update in case it exists.
     */
    where: professorWhereUniqueInput
    /**
     * In case the professor found by the `where` argument doesn't exist, create a new professor with this data.
     */
    create: XOR<professorCreateInput, professorUncheckedCreateInput>
    /**
     * In case the professor was found with the provided `where` argument, update it with this data.
     */
    update: XOR<professorUpdateInput, professorUncheckedUpdateInput>
  }

  /**
   * professor delete
   */
  export type professorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the professor
     */
    select?: professorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the professor
     */
    omit?: professorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: professorInclude<ExtArgs> | null
    /**
     * Filter which professor to delete.
     */
    where: professorWhereUniqueInput
  }

  /**
   * professor deleteMany
   */
  export type professorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which professors to delete
     */
    where?: professorWhereInput
    /**
     * Limit how many professors to delete.
     */
    limit?: number
  }

  /**
   * professor.turma
   */
  export type professor$turmaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the turma
     */
    select?: turmaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the turma
     */
    omit?: turmaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: turmaInclude<ExtArgs> | null
    where?: turmaWhereInput
    orderBy?: turmaOrderByWithRelationInput | turmaOrderByWithRelationInput[]
    cursor?: turmaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TurmaScalarFieldEnum | TurmaScalarFieldEnum[]
  }

  /**
   * professor without action
   */
  export type professorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the professor
     */
    select?: professorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the professor
     */
    omit?: professorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: professorInclude<ExtArgs> | null
  }


  /**
   * Model turma
   */

  export type AggregateTurma = {
    _count: TurmaCountAggregateOutputType | null
    _avg: TurmaAvgAggregateOutputType | null
    _sum: TurmaSumAggregateOutputType | null
    _min: TurmaMinAggregateOutputType | null
    _max: TurmaMaxAggregateOutputType | null
  }

  export type TurmaAvgAggregateOutputType = {
    id: number | null
    professorId: number | null
  }

  export type TurmaSumAggregateOutputType = {
    id: number | null
    professorId: number | null
  }

  export type TurmaMinAggregateOutputType = {
    id: number | null
    nome: string | null
    arteMarcial: string | null
    professorId: number | null
  }

  export type TurmaMaxAggregateOutputType = {
    id: number | null
    nome: string | null
    arteMarcial: string | null
    professorId: number | null
  }

  export type TurmaCountAggregateOutputType = {
    id: number
    nome: number
    arteMarcial: number
    professorId: number
    _all: number
  }


  export type TurmaAvgAggregateInputType = {
    id?: true
    professorId?: true
  }

  export type TurmaSumAggregateInputType = {
    id?: true
    professorId?: true
  }

  export type TurmaMinAggregateInputType = {
    id?: true
    nome?: true
    arteMarcial?: true
    professorId?: true
  }

  export type TurmaMaxAggregateInputType = {
    id?: true
    nome?: true
    arteMarcial?: true
    professorId?: true
  }

  export type TurmaCountAggregateInputType = {
    id?: true
    nome?: true
    arteMarcial?: true
    professorId?: true
    _all?: true
  }

  export type TurmaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which turma to aggregate.
     */
    where?: turmaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of turmas to fetch.
     */
    orderBy?: turmaOrderByWithRelationInput | turmaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: turmaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` turmas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` turmas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned turmas
    **/
    _count?: true | TurmaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TurmaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TurmaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TurmaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TurmaMaxAggregateInputType
  }

  export type GetTurmaAggregateType<T extends TurmaAggregateArgs> = {
        [P in keyof T & keyof AggregateTurma]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTurma[P]>
      : GetScalarType<T[P], AggregateTurma[P]>
  }




  export type turmaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: turmaWhereInput
    orderBy?: turmaOrderByWithAggregationInput | turmaOrderByWithAggregationInput[]
    by: TurmaScalarFieldEnum[] | TurmaScalarFieldEnum
    having?: turmaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TurmaCountAggregateInputType | true
    _avg?: TurmaAvgAggregateInputType
    _sum?: TurmaSumAggregateInputType
    _min?: TurmaMinAggregateInputType
    _max?: TurmaMaxAggregateInputType
  }

  export type TurmaGroupByOutputType = {
    id: number
    nome: string
    arteMarcial: string | null
    professorId: number | null
    _count: TurmaCountAggregateOutputType | null
    _avg: TurmaAvgAggregateOutputType | null
    _sum: TurmaSumAggregateOutputType | null
    _min: TurmaMinAggregateOutputType | null
    _max: TurmaMaxAggregateOutputType | null
  }

  type GetTurmaGroupByPayload<T extends turmaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TurmaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TurmaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TurmaGroupByOutputType[P]>
            : GetScalarType<T[P], TurmaGroupByOutputType[P]>
        }
      >
    >


  export type turmaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    arteMarcial?: boolean
    professorId?: boolean
    matricula?: boolean | turma$matriculaArgs<ExtArgs>
    professor?: boolean | turma$professorArgs<ExtArgs>
    _count?: boolean | TurmaCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["turma"]>



  export type turmaSelectScalar = {
    id?: boolean
    nome?: boolean
    arteMarcial?: boolean
    professorId?: boolean
  }

  export type turmaOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nome" | "arteMarcial" | "professorId", ExtArgs["result"]["turma"]>
  export type turmaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    matricula?: boolean | turma$matriculaArgs<ExtArgs>
    professor?: boolean | turma$professorArgs<ExtArgs>
    _count?: boolean | TurmaCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $turmaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "turma"
    objects: {
      matricula: Prisma.$matriculaPayload<ExtArgs>[]
      professor: Prisma.$professorPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nome: string
      arteMarcial: string | null
      professorId: number | null
    }, ExtArgs["result"]["turma"]>
    composites: {}
  }

  type turmaGetPayload<S extends boolean | null | undefined | turmaDefaultArgs> = $Result.GetResult<Prisma.$turmaPayload, S>

  type turmaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<turmaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TurmaCountAggregateInputType | true
    }

  export interface turmaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['turma'], meta: { name: 'turma' } }
    /**
     * Find zero or one Turma that matches the filter.
     * @param {turmaFindUniqueArgs} args - Arguments to find a Turma
     * @example
     * // Get one Turma
     * const turma = await prisma.turma.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends turmaFindUniqueArgs>(args: SelectSubset<T, turmaFindUniqueArgs<ExtArgs>>): Prisma__turmaClient<$Result.GetResult<Prisma.$turmaPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Turma that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {turmaFindUniqueOrThrowArgs} args - Arguments to find a Turma
     * @example
     * // Get one Turma
     * const turma = await prisma.turma.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends turmaFindUniqueOrThrowArgs>(args: SelectSubset<T, turmaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__turmaClient<$Result.GetResult<Prisma.$turmaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Turma that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {turmaFindFirstArgs} args - Arguments to find a Turma
     * @example
     * // Get one Turma
     * const turma = await prisma.turma.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends turmaFindFirstArgs>(args?: SelectSubset<T, turmaFindFirstArgs<ExtArgs>>): Prisma__turmaClient<$Result.GetResult<Prisma.$turmaPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Turma that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {turmaFindFirstOrThrowArgs} args - Arguments to find a Turma
     * @example
     * // Get one Turma
     * const turma = await prisma.turma.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends turmaFindFirstOrThrowArgs>(args?: SelectSubset<T, turmaFindFirstOrThrowArgs<ExtArgs>>): Prisma__turmaClient<$Result.GetResult<Prisma.$turmaPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Turmas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {turmaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Turmas
     * const turmas = await prisma.turma.findMany()
     * 
     * // Get first 10 Turmas
     * const turmas = await prisma.turma.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const turmaWithIdOnly = await prisma.turma.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends turmaFindManyArgs>(args?: SelectSubset<T, turmaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$turmaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Turma.
     * @param {turmaCreateArgs} args - Arguments to create a Turma.
     * @example
     * // Create one Turma
     * const Turma = await prisma.turma.create({
     *   data: {
     *     // ... data to create a Turma
     *   }
     * })
     * 
     */
    create<T extends turmaCreateArgs>(args: SelectSubset<T, turmaCreateArgs<ExtArgs>>): Prisma__turmaClient<$Result.GetResult<Prisma.$turmaPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Turmas.
     * @param {turmaCreateManyArgs} args - Arguments to create many Turmas.
     * @example
     * // Create many Turmas
     * const turma = await prisma.turma.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends turmaCreateManyArgs>(args?: SelectSubset<T, turmaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Turma.
     * @param {turmaDeleteArgs} args - Arguments to delete one Turma.
     * @example
     * // Delete one Turma
     * const Turma = await prisma.turma.delete({
     *   where: {
     *     // ... filter to delete one Turma
     *   }
     * })
     * 
     */
    delete<T extends turmaDeleteArgs>(args: SelectSubset<T, turmaDeleteArgs<ExtArgs>>): Prisma__turmaClient<$Result.GetResult<Prisma.$turmaPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Turma.
     * @param {turmaUpdateArgs} args - Arguments to update one Turma.
     * @example
     * // Update one Turma
     * const turma = await prisma.turma.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends turmaUpdateArgs>(args: SelectSubset<T, turmaUpdateArgs<ExtArgs>>): Prisma__turmaClient<$Result.GetResult<Prisma.$turmaPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Turmas.
     * @param {turmaDeleteManyArgs} args - Arguments to filter Turmas to delete.
     * @example
     * // Delete a few Turmas
     * const { count } = await prisma.turma.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends turmaDeleteManyArgs>(args?: SelectSubset<T, turmaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Turmas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {turmaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Turmas
     * const turma = await prisma.turma.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends turmaUpdateManyArgs>(args: SelectSubset<T, turmaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Turma.
     * @param {turmaUpsertArgs} args - Arguments to update or create a Turma.
     * @example
     * // Update or create a Turma
     * const turma = await prisma.turma.upsert({
     *   create: {
     *     // ... data to create a Turma
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Turma we want to update
     *   }
     * })
     */
    upsert<T extends turmaUpsertArgs>(args: SelectSubset<T, turmaUpsertArgs<ExtArgs>>): Prisma__turmaClient<$Result.GetResult<Prisma.$turmaPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Turmas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {turmaCountArgs} args - Arguments to filter Turmas to count.
     * @example
     * // Count the number of Turmas
     * const count = await prisma.turma.count({
     *   where: {
     *     // ... the filter for the Turmas we want to count
     *   }
     * })
    **/
    count<T extends turmaCountArgs>(
      args?: Subset<T, turmaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TurmaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Turma.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TurmaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TurmaAggregateArgs>(args: Subset<T, TurmaAggregateArgs>): Prisma.PrismaPromise<GetTurmaAggregateType<T>>

    /**
     * Group by Turma.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {turmaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends turmaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: turmaGroupByArgs['orderBy'] }
        : { orderBy?: turmaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, turmaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTurmaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the turma model
   */
  readonly fields: turmaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for turma.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__turmaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    matricula<T extends turma$matriculaArgs<ExtArgs> = {}>(args?: Subset<T, turma$matriculaArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$matriculaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    professor<T extends turma$professorArgs<ExtArgs> = {}>(args?: Subset<T, turma$professorArgs<ExtArgs>>): Prisma__professorClient<$Result.GetResult<Prisma.$professorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the turma model
   */
  interface turmaFieldRefs {
    readonly id: FieldRef<"turma", 'Int'>
    readonly nome: FieldRef<"turma", 'String'>
    readonly arteMarcial: FieldRef<"turma", 'String'>
    readonly professorId: FieldRef<"turma", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * turma findUnique
   */
  export type turmaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the turma
     */
    select?: turmaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the turma
     */
    omit?: turmaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: turmaInclude<ExtArgs> | null
    /**
     * Filter, which turma to fetch.
     */
    where: turmaWhereUniqueInput
  }

  /**
   * turma findUniqueOrThrow
   */
  export type turmaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the turma
     */
    select?: turmaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the turma
     */
    omit?: turmaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: turmaInclude<ExtArgs> | null
    /**
     * Filter, which turma to fetch.
     */
    where: turmaWhereUniqueInput
  }

  /**
   * turma findFirst
   */
  export type turmaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the turma
     */
    select?: turmaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the turma
     */
    omit?: turmaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: turmaInclude<ExtArgs> | null
    /**
     * Filter, which turma to fetch.
     */
    where?: turmaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of turmas to fetch.
     */
    orderBy?: turmaOrderByWithRelationInput | turmaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for turmas.
     */
    cursor?: turmaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` turmas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` turmas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of turmas.
     */
    distinct?: TurmaScalarFieldEnum | TurmaScalarFieldEnum[]
  }

  /**
   * turma findFirstOrThrow
   */
  export type turmaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the turma
     */
    select?: turmaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the turma
     */
    omit?: turmaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: turmaInclude<ExtArgs> | null
    /**
     * Filter, which turma to fetch.
     */
    where?: turmaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of turmas to fetch.
     */
    orderBy?: turmaOrderByWithRelationInput | turmaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for turmas.
     */
    cursor?: turmaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` turmas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` turmas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of turmas.
     */
    distinct?: TurmaScalarFieldEnum | TurmaScalarFieldEnum[]
  }

  /**
   * turma findMany
   */
  export type turmaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the turma
     */
    select?: turmaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the turma
     */
    omit?: turmaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: turmaInclude<ExtArgs> | null
    /**
     * Filter, which turmas to fetch.
     */
    where?: turmaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of turmas to fetch.
     */
    orderBy?: turmaOrderByWithRelationInput | turmaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing turmas.
     */
    cursor?: turmaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` turmas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` turmas.
     */
    skip?: number
    distinct?: TurmaScalarFieldEnum | TurmaScalarFieldEnum[]
  }

  /**
   * turma create
   */
  export type turmaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the turma
     */
    select?: turmaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the turma
     */
    omit?: turmaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: turmaInclude<ExtArgs> | null
    /**
     * The data needed to create a turma.
     */
    data: XOR<turmaCreateInput, turmaUncheckedCreateInput>
  }

  /**
   * turma createMany
   */
  export type turmaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many turmas.
     */
    data: turmaCreateManyInput | turmaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * turma update
   */
  export type turmaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the turma
     */
    select?: turmaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the turma
     */
    omit?: turmaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: turmaInclude<ExtArgs> | null
    /**
     * The data needed to update a turma.
     */
    data: XOR<turmaUpdateInput, turmaUncheckedUpdateInput>
    /**
     * Choose, which turma to update.
     */
    where: turmaWhereUniqueInput
  }

  /**
   * turma updateMany
   */
  export type turmaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update turmas.
     */
    data: XOR<turmaUpdateManyMutationInput, turmaUncheckedUpdateManyInput>
    /**
     * Filter which turmas to update
     */
    where?: turmaWhereInput
    /**
     * Limit how many turmas to update.
     */
    limit?: number
  }

  /**
   * turma upsert
   */
  export type turmaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the turma
     */
    select?: turmaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the turma
     */
    omit?: turmaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: turmaInclude<ExtArgs> | null
    /**
     * The filter to search for the turma to update in case it exists.
     */
    where: turmaWhereUniqueInput
    /**
     * In case the turma found by the `where` argument doesn't exist, create a new turma with this data.
     */
    create: XOR<turmaCreateInput, turmaUncheckedCreateInput>
    /**
     * In case the turma was found with the provided `where` argument, update it with this data.
     */
    update: XOR<turmaUpdateInput, turmaUncheckedUpdateInput>
  }

  /**
   * turma delete
   */
  export type turmaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the turma
     */
    select?: turmaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the turma
     */
    omit?: turmaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: turmaInclude<ExtArgs> | null
    /**
     * Filter which turma to delete.
     */
    where: turmaWhereUniqueInput
  }

  /**
   * turma deleteMany
   */
  export type turmaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which turmas to delete
     */
    where?: turmaWhereInput
    /**
     * Limit how many turmas to delete.
     */
    limit?: number
  }

  /**
   * turma.matricula
   */
  export type turma$matriculaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the matricula
     */
    select?: matriculaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the matricula
     */
    omit?: matriculaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: matriculaInclude<ExtArgs> | null
    where?: matriculaWhereInput
    orderBy?: matriculaOrderByWithRelationInput | matriculaOrderByWithRelationInput[]
    cursor?: matriculaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MatriculaScalarFieldEnum | MatriculaScalarFieldEnum[]
  }

  /**
   * turma.professor
   */
  export type turma$professorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the professor
     */
    select?: professorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the professor
     */
    omit?: professorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: professorInclude<ExtArgs> | null
    where?: professorWhereInput
  }

  /**
   * turma without action
   */
  export type turmaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the turma
     */
    select?: turmaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the turma
     */
    omit?: turmaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: turmaInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const AlunoScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    email: 'email',
    telefone: 'telefone',
    datanasc: 'datanasc',
    arteMarcial: 'arteMarcial'
  };

  export type AlunoScalarFieldEnum = (typeof AlunoScalarFieldEnum)[keyof typeof AlunoScalarFieldEnum]


  export const MatriculaScalarFieldEnum: {
    id: 'id',
    alunoId: 'alunoId',
    turmaId: 'turmaId',
    dataMatricula: 'dataMatricula'
  };

  export type MatriculaScalarFieldEnum = (typeof MatriculaScalarFieldEnum)[keyof typeof MatriculaScalarFieldEnum]


  export const ProfessorScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    email: 'email',
    telefone: 'telefone',
    arteMarcial: 'arteMarcial'
  };

  export type ProfessorScalarFieldEnum = (typeof ProfessorScalarFieldEnum)[keyof typeof ProfessorScalarFieldEnum]


  export const TurmaScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    arteMarcial: 'arteMarcial',
    professorId: 'professorId'
  };

  export type TurmaScalarFieldEnum = (typeof TurmaScalarFieldEnum)[keyof typeof TurmaScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const alunoOrderByRelevanceFieldEnum: {
    nome: 'nome',
    email: 'email',
    telefone: 'telefone',
    arteMarcial: 'arteMarcial'
  };

  export type alunoOrderByRelevanceFieldEnum = (typeof alunoOrderByRelevanceFieldEnum)[keyof typeof alunoOrderByRelevanceFieldEnum]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const professorOrderByRelevanceFieldEnum: {
    nome: 'nome',
    email: 'email',
    telefone: 'telefone',
    arteMarcial: 'arteMarcial'
  };

  export type professorOrderByRelevanceFieldEnum = (typeof professorOrderByRelevanceFieldEnum)[keyof typeof professorOrderByRelevanceFieldEnum]


  export const turmaOrderByRelevanceFieldEnum: {
    nome: 'nome',
    arteMarcial: 'arteMarcial'
  };

  export type turmaOrderByRelevanceFieldEnum = (typeof turmaOrderByRelevanceFieldEnum)[keyof typeof turmaOrderByRelevanceFieldEnum]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type alunoWhereInput = {
    AND?: alunoWhereInput | alunoWhereInput[]
    OR?: alunoWhereInput[]
    NOT?: alunoWhereInput | alunoWhereInput[]
    id?: IntFilter<"aluno"> | number
    nome?: StringFilter<"aluno"> | string
    email?: StringFilter<"aluno"> | string
    telefone?: StringFilter<"aluno"> | string
    datanasc?: DateTimeFilter<"aluno"> | Date | string
    arteMarcial?: StringFilter<"aluno"> | string
    matricula?: MatriculaListRelationFilter
  }

  export type alunoOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    telefone?: SortOrder
    datanasc?: SortOrder
    arteMarcial?: SortOrder
    matricula?: matriculaOrderByRelationAggregateInput
    _relevance?: alunoOrderByRelevanceInput
  }

  export type alunoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: alunoWhereInput | alunoWhereInput[]
    OR?: alunoWhereInput[]
    NOT?: alunoWhereInput | alunoWhereInput[]
    nome?: StringFilter<"aluno"> | string
    telefone?: StringFilter<"aluno"> | string
    datanasc?: DateTimeFilter<"aluno"> | Date | string
    arteMarcial?: StringFilter<"aluno"> | string
    matricula?: MatriculaListRelationFilter
  }, "id" | "email">

  export type alunoOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    telefone?: SortOrder
    datanasc?: SortOrder
    arteMarcial?: SortOrder
    _count?: alunoCountOrderByAggregateInput
    _avg?: alunoAvgOrderByAggregateInput
    _max?: alunoMaxOrderByAggregateInput
    _min?: alunoMinOrderByAggregateInput
    _sum?: alunoSumOrderByAggregateInput
  }

  export type alunoScalarWhereWithAggregatesInput = {
    AND?: alunoScalarWhereWithAggregatesInput | alunoScalarWhereWithAggregatesInput[]
    OR?: alunoScalarWhereWithAggregatesInput[]
    NOT?: alunoScalarWhereWithAggregatesInput | alunoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"aluno"> | number
    nome?: StringWithAggregatesFilter<"aluno"> | string
    email?: StringWithAggregatesFilter<"aluno"> | string
    telefone?: StringWithAggregatesFilter<"aluno"> | string
    datanasc?: DateTimeWithAggregatesFilter<"aluno"> | Date | string
    arteMarcial?: StringWithAggregatesFilter<"aluno"> | string
  }

  export type matriculaWhereInput = {
    AND?: matriculaWhereInput | matriculaWhereInput[]
    OR?: matriculaWhereInput[]
    NOT?: matriculaWhereInput | matriculaWhereInput[]
    id?: IntFilter<"matricula"> | number
    alunoId?: IntFilter<"matricula"> | number
    turmaId?: IntFilter<"matricula"> | number
    dataMatricula?: DateTimeNullableFilter<"matricula"> | Date | string | null
    aluno?: XOR<AlunoScalarRelationFilter, alunoWhereInput>
    turma?: XOR<TurmaScalarRelationFilter, turmaWhereInput>
  }

  export type matriculaOrderByWithRelationInput = {
    id?: SortOrder
    alunoId?: SortOrder
    turmaId?: SortOrder
    dataMatricula?: SortOrderInput | SortOrder
    aluno?: alunoOrderByWithRelationInput
    turma?: turmaOrderByWithRelationInput
  }

  export type matriculaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: matriculaWhereInput | matriculaWhereInput[]
    OR?: matriculaWhereInput[]
    NOT?: matriculaWhereInput | matriculaWhereInput[]
    alunoId?: IntFilter<"matricula"> | number
    turmaId?: IntFilter<"matricula"> | number
    dataMatricula?: DateTimeNullableFilter<"matricula"> | Date | string | null
    aluno?: XOR<AlunoScalarRelationFilter, alunoWhereInput>
    turma?: XOR<TurmaScalarRelationFilter, turmaWhereInput>
  }, "id">

  export type matriculaOrderByWithAggregationInput = {
    id?: SortOrder
    alunoId?: SortOrder
    turmaId?: SortOrder
    dataMatricula?: SortOrderInput | SortOrder
    _count?: matriculaCountOrderByAggregateInput
    _avg?: matriculaAvgOrderByAggregateInput
    _max?: matriculaMaxOrderByAggregateInput
    _min?: matriculaMinOrderByAggregateInput
    _sum?: matriculaSumOrderByAggregateInput
  }

  export type matriculaScalarWhereWithAggregatesInput = {
    AND?: matriculaScalarWhereWithAggregatesInput | matriculaScalarWhereWithAggregatesInput[]
    OR?: matriculaScalarWhereWithAggregatesInput[]
    NOT?: matriculaScalarWhereWithAggregatesInput | matriculaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"matricula"> | number
    alunoId?: IntWithAggregatesFilter<"matricula"> | number
    turmaId?: IntWithAggregatesFilter<"matricula"> | number
    dataMatricula?: DateTimeNullableWithAggregatesFilter<"matricula"> | Date | string | null
  }

  export type professorWhereInput = {
    AND?: professorWhereInput | professorWhereInput[]
    OR?: professorWhereInput[]
    NOT?: professorWhereInput | professorWhereInput[]
    id?: IntFilter<"professor"> | number
    nome?: StringFilter<"professor"> | string
    email?: StringFilter<"professor"> | string
    telefone?: StringNullableFilter<"professor"> | string | null
    arteMarcial?: StringNullableFilter<"professor"> | string | null
    turma?: TurmaListRelationFilter
  }

  export type professorOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    telefone?: SortOrderInput | SortOrder
    arteMarcial?: SortOrderInput | SortOrder
    turma?: turmaOrderByRelationAggregateInput
    _relevance?: professorOrderByRelevanceInput
  }

  export type professorWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: professorWhereInput | professorWhereInput[]
    OR?: professorWhereInput[]
    NOT?: professorWhereInput | professorWhereInput[]
    nome?: StringFilter<"professor"> | string
    telefone?: StringNullableFilter<"professor"> | string | null
    arteMarcial?: StringNullableFilter<"professor"> | string | null
    turma?: TurmaListRelationFilter
  }, "id" | "email">

  export type professorOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    telefone?: SortOrderInput | SortOrder
    arteMarcial?: SortOrderInput | SortOrder
    _count?: professorCountOrderByAggregateInput
    _avg?: professorAvgOrderByAggregateInput
    _max?: professorMaxOrderByAggregateInput
    _min?: professorMinOrderByAggregateInput
    _sum?: professorSumOrderByAggregateInput
  }

  export type professorScalarWhereWithAggregatesInput = {
    AND?: professorScalarWhereWithAggregatesInput | professorScalarWhereWithAggregatesInput[]
    OR?: professorScalarWhereWithAggregatesInput[]
    NOT?: professorScalarWhereWithAggregatesInput | professorScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"professor"> | number
    nome?: StringWithAggregatesFilter<"professor"> | string
    email?: StringWithAggregatesFilter<"professor"> | string
    telefone?: StringNullableWithAggregatesFilter<"professor"> | string | null
    arteMarcial?: StringNullableWithAggregatesFilter<"professor"> | string | null
  }

  export type turmaWhereInput = {
    AND?: turmaWhereInput | turmaWhereInput[]
    OR?: turmaWhereInput[]
    NOT?: turmaWhereInput | turmaWhereInput[]
    id?: IntFilter<"turma"> | number
    nome?: StringFilter<"turma"> | string
    arteMarcial?: StringNullableFilter<"turma"> | string | null
    professorId?: IntNullableFilter<"turma"> | number | null
    matricula?: MatriculaListRelationFilter
    professor?: XOR<ProfessorNullableScalarRelationFilter, professorWhereInput> | null
  }

  export type turmaOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    arteMarcial?: SortOrderInput | SortOrder
    professorId?: SortOrderInput | SortOrder
    matricula?: matriculaOrderByRelationAggregateInput
    professor?: professorOrderByWithRelationInput
    _relevance?: turmaOrderByRelevanceInput
  }

  export type turmaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: turmaWhereInput | turmaWhereInput[]
    OR?: turmaWhereInput[]
    NOT?: turmaWhereInput | turmaWhereInput[]
    nome?: StringFilter<"turma"> | string
    arteMarcial?: StringNullableFilter<"turma"> | string | null
    professorId?: IntNullableFilter<"turma"> | number | null
    matricula?: MatriculaListRelationFilter
    professor?: XOR<ProfessorNullableScalarRelationFilter, professorWhereInput> | null
  }, "id">

  export type turmaOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    arteMarcial?: SortOrderInput | SortOrder
    professorId?: SortOrderInput | SortOrder
    _count?: turmaCountOrderByAggregateInput
    _avg?: turmaAvgOrderByAggregateInput
    _max?: turmaMaxOrderByAggregateInput
    _min?: turmaMinOrderByAggregateInput
    _sum?: turmaSumOrderByAggregateInput
  }

  export type turmaScalarWhereWithAggregatesInput = {
    AND?: turmaScalarWhereWithAggregatesInput | turmaScalarWhereWithAggregatesInput[]
    OR?: turmaScalarWhereWithAggregatesInput[]
    NOT?: turmaScalarWhereWithAggregatesInput | turmaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"turma"> | number
    nome?: StringWithAggregatesFilter<"turma"> | string
    arteMarcial?: StringNullableWithAggregatesFilter<"turma"> | string | null
    professorId?: IntNullableWithAggregatesFilter<"turma"> | number | null
  }

  export type alunoCreateInput = {
    nome: string
    email: string
    telefone: string
    datanasc: Date | string
    arteMarcial: string
    matricula?: matriculaCreateNestedManyWithoutAlunoInput
  }

  export type alunoUncheckedCreateInput = {
    id?: number
    nome: string
    email: string
    telefone: string
    datanasc: Date | string
    arteMarcial: string
    matricula?: matriculaUncheckedCreateNestedManyWithoutAlunoInput
  }

  export type alunoUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    datanasc?: DateTimeFieldUpdateOperationsInput | Date | string
    arteMarcial?: StringFieldUpdateOperationsInput | string
    matricula?: matriculaUpdateManyWithoutAlunoNestedInput
  }

  export type alunoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    datanasc?: DateTimeFieldUpdateOperationsInput | Date | string
    arteMarcial?: StringFieldUpdateOperationsInput | string
    matricula?: matriculaUncheckedUpdateManyWithoutAlunoNestedInput
  }

  export type alunoCreateManyInput = {
    id?: number
    nome: string
    email: string
    telefone: string
    datanasc: Date | string
    arteMarcial: string
  }

  export type alunoUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    datanasc?: DateTimeFieldUpdateOperationsInput | Date | string
    arteMarcial?: StringFieldUpdateOperationsInput | string
  }

  export type alunoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    datanasc?: DateTimeFieldUpdateOperationsInput | Date | string
    arteMarcial?: StringFieldUpdateOperationsInput | string
  }

  export type matriculaCreateInput = {
    dataMatricula?: Date | string | null
    aluno: alunoCreateNestedOneWithoutMatriculaInput
    turma: turmaCreateNestedOneWithoutMatriculaInput
  }

  export type matriculaUncheckedCreateInput = {
    id?: number
    alunoId: number
    turmaId: number
    dataMatricula?: Date | string | null
  }

  export type matriculaUpdateInput = {
    dataMatricula?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    aluno?: alunoUpdateOneRequiredWithoutMatriculaNestedInput
    turma?: turmaUpdateOneRequiredWithoutMatriculaNestedInput
  }

  export type matriculaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    alunoId?: IntFieldUpdateOperationsInput | number
    turmaId?: IntFieldUpdateOperationsInput | number
    dataMatricula?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type matriculaCreateManyInput = {
    id?: number
    alunoId: number
    turmaId: number
    dataMatricula?: Date | string | null
  }

  export type matriculaUpdateManyMutationInput = {
    dataMatricula?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type matriculaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    alunoId?: IntFieldUpdateOperationsInput | number
    turmaId?: IntFieldUpdateOperationsInput | number
    dataMatricula?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type professorCreateInput = {
    nome: string
    email: string
    telefone?: string | null
    arteMarcial?: string | null
    turma?: turmaCreateNestedManyWithoutProfessorInput
  }

  export type professorUncheckedCreateInput = {
    id?: number
    nome: string
    email: string
    telefone?: string | null
    arteMarcial?: string | null
    turma?: turmaUncheckedCreateNestedManyWithoutProfessorInput
  }

  export type professorUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    arteMarcial?: NullableStringFieldUpdateOperationsInput | string | null
    turma?: turmaUpdateManyWithoutProfessorNestedInput
  }

  export type professorUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    arteMarcial?: NullableStringFieldUpdateOperationsInput | string | null
    turma?: turmaUncheckedUpdateManyWithoutProfessorNestedInput
  }

  export type professorCreateManyInput = {
    id?: number
    nome: string
    email: string
    telefone?: string | null
    arteMarcial?: string | null
  }

  export type professorUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    arteMarcial?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type professorUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    arteMarcial?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type turmaCreateInput = {
    nome: string
    arteMarcial?: string | null
    matricula?: matriculaCreateNestedManyWithoutTurmaInput
    professor?: professorCreateNestedOneWithoutTurmaInput
  }

  export type turmaUncheckedCreateInput = {
    id?: number
    nome: string
    arteMarcial?: string | null
    professorId?: number | null
    matricula?: matriculaUncheckedCreateNestedManyWithoutTurmaInput
  }

  export type turmaUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    arteMarcial?: NullableStringFieldUpdateOperationsInput | string | null
    matricula?: matriculaUpdateManyWithoutTurmaNestedInput
    professor?: professorUpdateOneWithoutTurmaNestedInput
  }

  export type turmaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    arteMarcial?: NullableStringFieldUpdateOperationsInput | string | null
    professorId?: NullableIntFieldUpdateOperationsInput | number | null
    matricula?: matriculaUncheckedUpdateManyWithoutTurmaNestedInput
  }

  export type turmaCreateManyInput = {
    id?: number
    nome: string
    arteMarcial?: string | null
    professorId?: number | null
  }

  export type turmaUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
    arteMarcial?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type turmaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    arteMarcial?: NullableStringFieldUpdateOperationsInput | string | null
    professorId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type MatriculaListRelationFilter = {
    every?: matriculaWhereInput
    some?: matriculaWhereInput
    none?: matriculaWhereInput
  }

  export type matriculaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type alunoOrderByRelevanceInput = {
    fields: alunoOrderByRelevanceFieldEnum | alunoOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type alunoCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    telefone?: SortOrder
    datanasc?: SortOrder
    arteMarcial?: SortOrder
  }

  export type alunoAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type alunoMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    telefone?: SortOrder
    datanasc?: SortOrder
    arteMarcial?: SortOrder
  }

  export type alunoMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    telefone?: SortOrder
    datanasc?: SortOrder
    arteMarcial?: SortOrder
  }

  export type alunoSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type AlunoScalarRelationFilter = {
    is?: alunoWhereInput
    isNot?: alunoWhereInput
  }

  export type TurmaScalarRelationFilter = {
    is?: turmaWhereInput
    isNot?: turmaWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type matriculaCountOrderByAggregateInput = {
    id?: SortOrder
    alunoId?: SortOrder
    turmaId?: SortOrder
    dataMatricula?: SortOrder
  }

  export type matriculaAvgOrderByAggregateInput = {
    id?: SortOrder
    alunoId?: SortOrder
    turmaId?: SortOrder
  }

  export type matriculaMaxOrderByAggregateInput = {
    id?: SortOrder
    alunoId?: SortOrder
    turmaId?: SortOrder
    dataMatricula?: SortOrder
  }

  export type matriculaMinOrderByAggregateInput = {
    id?: SortOrder
    alunoId?: SortOrder
    turmaId?: SortOrder
    dataMatricula?: SortOrder
  }

  export type matriculaSumOrderByAggregateInput = {
    id?: SortOrder
    alunoId?: SortOrder
    turmaId?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type TurmaListRelationFilter = {
    every?: turmaWhereInput
    some?: turmaWhereInput
    none?: turmaWhereInput
  }

  export type turmaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type professorOrderByRelevanceInput = {
    fields: professorOrderByRelevanceFieldEnum | professorOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type professorCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    telefone?: SortOrder
    arteMarcial?: SortOrder
  }

  export type professorAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type professorMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    telefone?: SortOrder
    arteMarcial?: SortOrder
  }

  export type professorMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    telefone?: SortOrder
    arteMarcial?: SortOrder
  }

  export type professorSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type ProfessorNullableScalarRelationFilter = {
    is?: professorWhereInput | null
    isNot?: professorWhereInput | null
  }

  export type turmaOrderByRelevanceInput = {
    fields: turmaOrderByRelevanceFieldEnum | turmaOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type turmaCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    arteMarcial?: SortOrder
    professorId?: SortOrder
  }

  export type turmaAvgOrderByAggregateInput = {
    id?: SortOrder
    professorId?: SortOrder
  }

  export type turmaMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    arteMarcial?: SortOrder
    professorId?: SortOrder
  }

  export type turmaMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    arteMarcial?: SortOrder
    professorId?: SortOrder
  }

  export type turmaSumOrderByAggregateInput = {
    id?: SortOrder
    professorId?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type matriculaCreateNestedManyWithoutAlunoInput = {
    create?: XOR<matriculaCreateWithoutAlunoInput, matriculaUncheckedCreateWithoutAlunoInput> | matriculaCreateWithoutAlunoInput[] | matriculaUncheckedCreateWithoutAlunoInput[]
    connectOrCreate?: matriculaCreateOrConnectWithoutAlunoInput | matriculaCreateOrConnectWithoutAlunoInput[]
    createMany?: matriculaCreateManyAlunoInputEnvelope
    connect?: matriculaWhereUniqueInput | matriculaWhereUniqueInput[]
  }

  export type matriculaUncheckedCreateNestedManyWithoutAlunoInput = {
    create?: XOR<matriculaCreateWithoutAlunoInput, matriculaUncheckedCreateWithoutAlunoInput> | matriculaCreateWithoutAlunoInput[] | matriculaUncheckedCreateWithoutAlunoInput[]
    connectOrCreate?: matriculaCreateOrConnectWithoutAlunoInput | matriculaCreateOrConnectWithoutAlunoInput[]
    createMany?: matriculaCreateManyAlunoInputEnvelope
    connect?: matriculaWhereUniqueInput | matriculaWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type matriculaUpdateManyWithoutAlunoNestedInput = {
    create?: XOR<matriculaCreateWithoutAlunoInput, matriculaUncheckedCreateWithoutAlunoInput> | matriculaCreateWithoutAlunoInput[] | matriculaUncheckedCreateWithoutAlunoInput[]
    connectOrCreate?: matriculaCreateOrConnectWithoutAlunoInput | matriculaCreateOrConnectWithoutAlunoInput[]
    upsert?: matriculaUpsertWithWhereUniqueWithoutAlunoInput | matriculaUpsertWithWhereUniqueWithoutAlunoInput[]
    createMany?: matriculaCreateManyAlunoInputEnvelope
    set?: matriculaWhereUniqueInput | matriculaWhereUniqueInput[]
    disconnect?: matriculaWhereUniqueInput | matriculaWhereUniqueInput[]
    delete?: matriculaWhereUniqueInput | matriculaWhereUniqueInput[]
    connect?: matriculaWhereUniqueInput | matriculaWhereUniqueInput[]
    update?: matriculaUpdateWithWhereUniqueWithoutAlunoInput | matriculaUpdateWithWhereUniqueWithoutAlunoInput[]
    updateMany?: matriculaUpdateManyWithWhereWithoutAlunoInput | matriculaUpdateManyWithWhereWithoutAlunoInput[]
    deleteMany?: matriculaScalarWhereInput | matriculaScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type matriculaUncheckedUpdateManyWithoutAlunoNestedInput = {
    create?: XOR<matriculaCreateWithoutAlunoInput, matriculaUncheckedCreateWithoutAlunoInput> | matriculaCreateWithoutAlunoInput[] | matriculaUncheckedCreateWithoutAlunoInput[]
    connectOrCreate?: matriculaCreateOrConnectWithoutAlunoInput | matriculaCreateOrConnectWithoutAlunoInput[]
    upsert?: matriculaUpsertWithWhereUniqueWithoutAlunoInput | matriculaUpsertWithWhereUniqueWithoutAlunoInput[]
    createMany?: matriculaCreateManyAlunoInputEnvelope
    set?: matriculaWhereUniqueInput | matriculaWhereUniqueInput[]
    disconnect?: matriculaWhereUniqueInput | matriculaWhereUniqueInput[]
    delete?: matriculaWhereUniqueInput | matriculaWhereUniqueInput[]
    connect?: matriculaWhereUniqueInput | matriculaWhereUniqueInput[]
    update?: matriculaUpdateWithWhereUniqueWithoutAlunoInput | matriculaUpdateWithWhereUniqueWithoutAlunoInput[]
    updateMany?: matriculaUpdateManyWithWhereWithoutAlunoInput | matriculaUpdateManyWithWhereWithoutAlunoInput[]
    deleteMany?: matriculaScalarWhereInput | matriculaScalarWhereInput[]
  }

  export type alunoCreateNestedOneWithoutMatriculaInput = {
    create?: XOR<alunoCreateWithoutMatriculaInput, alunoUncheckedCreateWithoutMatriculaInput>
    connectOrCreate?: alunoCreateOrConnectWithoutMatriculaInput
    connect?: alunoWhereUniqueInput
  }

  export type turmaCreateNestedOneWithoutMatriculaInput = {
    create?: XOR<turmaCreateWithoutMatriculaInput, turmaUncheckedCreateWithoutMatriculaInput>
    connectOrCreate?: turmaCreateOrConnectWithoutMatriculaInput
    connect?: turmaWhereUniqueInput
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type alunoUpdateOneRequiredWithoutMatriculaNestedInput = {
    create?: XOR<alunoCreateWithoutMatriculaInput, alunoUncheckedCreateWithoutMatriculaInput>
    connectOrCreate?: alunoCreateOrConnectWithoutMatriculaInput
    upsert?: alunoUpsertWithoutMatriculaInput
    connect?: alunoWhereUniqueInput
    update?: XOR<XOR<alunoUpdateToOneWithWhereWithoutMatriculaInput, alunoUpdateWithoutMatriculaInput>, alunoUncheckedUpdateWithoutMatriculaInput>
  }

  export type turmaUpdateOneRequiredWithoutMatriculaNestedInput = {
    create?: XOR<turmaCreateWithoutMatriculaInput, turmaUncheckedCreateWithoutMatriculaInput>
    connectOrCreate?: turmaCreateOrConnectWithoutMatriculaInput
    upsert?: turmaUpsertWithoutMatriculaInput
    connect?: turmaWhereUniqueInput
    update?: XOR<XOR<turmaUpdateToOneWithWhereWithoutMatriculaInput, turmaUpdateWithoutMatriculaInput>, turmaUncheckedUpdateWithoutMatriculaInput>
  }

  export type turmaCreateNestedManyWithoutProfessorInput = {
    create?: XOR<turmaCreateWithoutProfessorInput, turmaUncheckedCreateWithoutProfessorInput> | turmaCreateWithoutProfessorInput[] | turmaUncheckedCreateWithoutProfessorInput[]
    connectOrCreate?: turmaCreateOrConnectWithoutProfessorInput | turmaCreateOrConnectWithoutProfessorInput[]
    createMany?: turmaCreateManyProfessorInputEnvelope
    connect?: turmaWhereUniqueInput | turmaWhereUniqueInput[]
  }

  export type turmaUncheckedCreateNestedManyWithoutProfessorInput = {
    create?: XOR<turmaCreateWithoutProfessorInput, turmaUncheckedCreateWithoutProfessorInput> | turmaCreateWithoutProfessorInput[] | turmaUncheckedCreateWithoutProfessorInput[]
    connectOrCreate?: turmaCreateOrConnectWithoutProfessorInput | turmaCreateOrConnectWithoutProfessorInput[]
    createMany?: turmaCreateManyProfessorInputEnvelope
    connect?: turmaWhereUniqueInput | turmaWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type turmaUpdateManyWithoutProfessorNestedInput = {
    create?: XOR<turmaCreateWithoutProfessorInput, turmaUncheckedCreateWithoutProfessorInput> | turmaCreateWithoutProfessorInput[] | turmaUncheckedCreateWithoutProfessorInput[]
    connectOrCreate?: turmaCreateOrConnectWithoutProfessorInput | turmaCreateOrConnectWithoutProfessorInput[]
    upsert?: turmaUpsertWithWhereUniqueWithoutProfessorInput | turmaUpsertWithWhereUniqueWithoutProfessorInput[]
    createMany?: turmaCreateManyProfessorInputEnvelope
    set?: turmaWhereUniqueInput | turmaWhereUniqueInput[]
    disconnect?: turmaWhereUniqueInput | turmaWhereUniqueInput[]
    delete?: turmaWhereUniqueInput | turmaWhereUniqueInput[]
    connect?: turmaWhereUniqueInput | turmaWhereUniqueInput[]
    update?: turmaUpdateWithWhereUniqueWithoutProfessorInput | turmaUpdateWithWhereUniqueWithoutProfessorInput[]
    updateMany?: turmaUpdateManyWithWhereWithoutProfessorInput | turmaUpdateManyWithWhereWithoutProfessorInput[]
    deleteMany?: turmaScalarWhereInput | turmaScalarWhereInput[]
  }

  export type turmaUncheckedUpdateManyWithoutProfessorNestedInput = {
    create?: XOR<turmaCreateWithoutProfessorInput, turmaUncheckedCreateWithoutProfessorInput> | turmaCreateWithoutProfessorInput[] | turmaUncheckedCreateWithoutProfessorInput[]
    connectOrCreate?: turmaCreateOrConnectWithoutProfessorInput | turmaCreateOrConnectWithoutProfessorInput[]
    upsert?: turmaUpsertWithWhereUniqueWithoutProfessorInput | turmaUpsertWithWhereUniqueWithoutProfessorInput[]
    createMany?: turmaCreateManyProfessorInputEnvelope
    set?: turmaWhereUniqueInput | turmaWhereUniqueInput[]
    disconnect?: turmaWhereUniqueInput | turmaWhereUniqueInput[]
    delete?: turmaWhereUniqueInput | turmaWhereUniqueInput[]
    connect?: turmaWhereUniqueInput | turmaWhereUniqueInput[]
    update?: turmaUpdateWithWhereUniqueWithoutProfessorInput | turmaUpdateWithWhereUniqueWithoutProfessorInput[]
    updateMany?: turmaUpdateManyWithWhereWithoutProfessorInput | turmaUpdateManyWithWhereWithoutProfessorInput[]
    deleteMany?: turmaScalarWhereInput | turmaScalarWhereInput[]
  }

  export type matriculaCreateNestedManyWithoutTurmaInput = {
    create?: XOR<matriculaCreateWithoutTurmaInput, matriculaUncheckedCreateWithoutTurmaInput> | matriculaCreateWithoutTurmaInput[] | matriculaUncheckedCreateWithoutTurmaInput[]
    connectOrCreate?: matriculaCreateOrConnectWithoutTurmaInput | matriculaCreateOrConnectWithoutTurmaInput[]
    createMany?: matriculaCreateManyTurmaInputEnvelope
    connect?: matriculaWhereUniqueInput | matriculaWhereUniqueInput[]
  }

  export type professorCreateNestedOneWithoutTurmaInput = {
    create?: XOR<professorCreateWithoutTurmaInput, professorUncheckedCreateWithoutTurmaInput>
    connectOrCreate?: professorCreateOrConnectWithoutTurmaInput
    connect?: professorWhereUniqueInput
  }

  export type matriculaUncheckedCreateNestedManyWithoutTurmaInput = {
    create?: XOR<matriculaCreateWithoutTurmaInput, matriculaUncheckedCreateWithoutTurmaInput> | matriculaCreateWithoutTurmaInput[] | matriculaUncheckedCreateWithoutTurmaInput[]
    connectOrCreate?: matriculaCreateOrConnectWithoutTurmaInput | matriculaCreateOrConnectWithoutTurmaInput[]
    createMany?: matriculaCreateManyTurmaInputEnvelope
    connect?: matriculaWhereUniqueInput | matriculaWhereUniqueInput[]
  }

  export type matriculaUpdateManyWithoutTurmaNestedInput = {
    create?: XOR<matriculaCreateWithoutTurmaInput, matriculaUncheckedCreateWithoutTurmaInput> | matriculaCreateWithoutTurmaInput[] | matriculaUncheckedCreateWithoutTurmaInput[]
    connectOrCreate?: matriculaCreateOrConnectWithoutTurmaInput | matriculaCreateOrConnectWithoutTurmaInput[]
    upsert?: matriculaUpsertWithWhereUniqueWithoutTurmaInput | matriculaUpsertWithWhereUniqueWithoutTurmaInput[]
    createMany?: matriculaCreateManyTurmaInputEnvelope
    set?: matriculaWhereUniqueInput | matriculaWhereUniqueInput[]
    disconnect?: matriculaWhereUniqueInput | matriculaWhereUniqueInput[]
    delete?: matriculaWhereUniqueInput | matriculaWhereUniqueInput[]
    connect?: matriculaWhereUniqueInput | matriculaWhereUniqueInput[]
    update?: matriculaUpdateWithWhereUniqueWithoutTurmaInput | matriculaUpdateWithWhereUniqueWithoutTurmaInput[]
    updateMany?: matriculaUpdateManyWithWhereWithoutTurmaInput | matriculaUpdateManyWithWhereWithoutTurmaInput[]
    deleteMany?: matriculaScalarWhereInput | matriculaScalarWhereInput[]
  }

  export type professorUpdateOneWithoutTurmaNestedInput = {
    create?: XOR<professorCreateWithoutTurmaInput, professorUncheckedCreateWithoutTurmaInput>
    connectOrCreate?: professorCreateOrConnectWithoutTurmaInput
    upsert?: professorUpsertWithoutTurmaInput
    disconnect?: professorWhereInput | boolean
    delete?: professorWhereInput | boolean
    connect?: professorWhereUniqueInput
    update?: XOR<XOR<professorUpdateToOneWithWhereWithoutTurmaInput, professorUpdateWithoutTurmaInput>, professorUncheckedUpdateWithoutTurmaInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type matriculaUncheckedUpdateManyWithoutTurmaNestedInput = {
    create?: XOR<matriculaCreateWithoutTurmaInput, matriculaUncheckedCreateWithoutTurmaInput> | matriculaCreateWithoutTurmaInput[] | matriculaUncheckedCreateWithoutTurmaInput[]
    connectOrCreate?: matriculaCreateOrConnectWithoutTurmaInput | matriculaCreateOrConnectWithoutTurmaInput[]
    upsert?: matriculaUpsertWithWhereUniqueWithoutTurmaInput | matriculaUpsertWithWhereUniqueWithoutTurmaInput[]
    createMany?: matriculaCreateManyTurmaInputEnvelope
    set?: matriculaWhereUniqueInput | matriculaWhereUniqueInput[]
    disconnect?: matriculaWhereUniqueInput | matriculaWhereUniqueInput[]
    delete?: matriculaWhereUniqueInput | matriculaWhereUniqueInput[]
    connect?: matriculaWhereUniqueInput | matriculaWhereUniqueInput[]
    update?: matriculaUpdateWithWhereUniqueWithoutTurmaInput | matriculaUpdateWithWhereUniqueWithoutTurmaInput[]
    updateMany?: matriculaUpdateManyWithWhereWithoutTurmaInput | matriculaUpdateManyWithWhereWithoutTurmaInput[]
    deleteMany?: matriculaScalarWhereInput | matriculaScalarWhereInput[]
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type matriculaCreateWithoutAlunoInput = {
    dataMatricula?: Date | string | null
    turma: turmaCreateNestedOneWithoutMatriculaInput
  }

  export type matriculaUncheckedCreateWithoutAlunoInput = {
    id?: number
    turmaId: number
    dataMatricula?: Date | string | null
  }

  export type matriculaCreateOrConnectWithoutAlunoInput = {
    where: matriculaWhereUniqueInput
    create: XOR<matriculaCreateWithoutAlunoInput, matriculaUncheckedCreateWithoutAlunoInput>
  }

  export type matriculaCreateManyAlunoInputEnvelope = {
    data: matriculaCreateManyAlunoInput | matriculaCreateManyAlunoInput[]
    skipDuplicates?: boolean
  }

  export type matriculaUpsertWithWhereUniqueWithoutAlunoInput = {
    where: matriculaWhereUniqueInput
    update: XOR<matriculaUpdateWithoutAlunoInput, matriculaUncheckedUpdateWithoutAlunoInput>
    create: XOR<matriculaCreateWithoutAlunoInput, matriculaUncheckedCreateWithoutAlunoInput>
  }

  export type matriculaUpdateWithWhereUniqueWithoutAlunoInput = {
    where: matriculaWhereUniqueInput
    data: XOR<matriculaUpdateWithoutAlunoInput, matriculaUncheckedUpdateWithoutAlunoInput>
  }

  export type matriculaUpdateManyWithWhereWithoutAlunoInput = {
    where: matriculaScalarWhereInput
    data: XOR<matriculaUpdateManyMutationInput, matriculaUncheckedUpdateManyWithoutAlunoInput>
  }

  export type matriculaScalarWhereInput = {
    AND?: matriculaScalarWhereInput | matriculaScalarWhereInput[]
    OR?: matriculaScalarWhereInput[]
    NOT?: matriculaScalarWhereInput | matriculaScalarWhereInput[]
    id?: IntFilter<"matricula"> | number
    alunoId?: IntFilter<"matricula"> | number
    turmaId?: IntFilter<"matricula"> | number
    dataMatricula?: DateTimeNullableFilter<"matricula"> | Date | string | null
  }

  export type alunoCreateWithoutMatriculaInput = {
    nome: string
    email: string
    telefone: string
    datanasc: Date | string
    arteMarcial: string
  }

  export type alunoUncheckedCreateWithoutMatriculaInput = {
    id?: number
    nome: string
    email: string
    telefone: string
    datanasc: Date | string
    arteMarcial: string
  }

  export type alunoCreateOrConnectWithoutMatriculaInput = {
    where: alunoWhereUniqueInput
    create: XOR<alunoCreateWithoutMatriculaInput, alunoUncheckedCreateWithoutMatriculaInput>
  }

  export type turmaCreateWithoutMatriculaInput = {
    nome: string
    arteMarcial?: string | null
    professor?: professorCreateNestedOneWithoutTurmaInput
  }

  export type turmaUncheckedCreateWithoutMatriculaInput = {
    id?: number
    nome: string
    arteMarcial?: string | null
    professorId?: number | null
  }

  export type turmaCreateOrConnectWithoutMatriculaInput = {
    where: turmaWhereUniqueInput
    create: XOR<turmaCreateWithoutMatriculaInput, turmaUncheckedCreateWithoutMatriculaInput>
  }

  export type alunoUpsertWithoutMatriculaInput = {
    update: XOR<alunoUpdateWithoutMatriculaInput, alunoUncheckedUpdateWithoutMatriculaInput>
    create: XOR<alunoCreateWithoutMatriculaInput, alunoUncheckedCreateWithoutMatriculaInput>
    where?: alunoWhereInput
  }

  export type alunoUpdateToOneWithWhereWithoutMatriculaInput = {
    where?: alunoWhereInput
    data: XOR<alunoUpdateWithoutMatriculaInput, alunoUncheckedUpdateWithoutMatriculaInput>
  }

  export type alunoUpdateWithoutMatriculaInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    datanasc?: DateTimeFieldUpdateOperationsInput | Date | string
    arteMarcial?: StringFieldUpdateOperationsInput | string
  }

  export type alunoUncheckedUpdateWithoutMatriculaInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    datanasc?: DateTimeFieldUpdateOperationsInput | Date | string
    arteMarcial?: StringFieldUpdateOperationsInput | string
  }

  export type turmaUpsertWithoutMatriculaInput = {
    update: XOR<turmaUpdateWithoutMatriculaInput, turmaUncheckedUpdateWithoutMatriculaInput>
    create: XOR<turmaCreateWithoutMatriculaInput, turmaUncheckedCreateWithoutMatriculaInput>
    where?: turmaWhereInput
  }

  export type turmaUpdateToOneWithWhereWithoutMatriculaInput = {
    where?: turmaWhereInput
    data: XOR<turmaUpdateWithoutMatriculaInput, turmaUncheckedUpdateWithoutMatriculaInput>
  }

  export type turmaUpdateWithoutMatriculaInput = {
    nome?: StringFieldUpdateOperationsInput | string
    arteMarcial?: NullableStringFieldUpdateOperationsInput | string | null
    professor?: professorUpdateOneWithoutTurmaNestedInput
  }

  export type turmaUncheckedUpdateWithoutMatriculaInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    arteMarcial?: NullableStringFieldUpdateOperationsInput | string | null
    professorId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type turmaCreateWithoutProfessorInput = {
    nome: string
    arteMarcial?: string | null
    matricula?: matriculaCreateNestedManyWithoutTurmaInput
  }

  export type turmaUncheckedCreateWithoutProfessorInput = {
    id?: number
    nome: string
    arteMarcial?: string | null
    matricula?: matriculaUncheckedCreateNestedManyWithoutTurmaInput
  }

  export type turmaCreateOrConnectWithoutProfessorInput = {
    where: turmaWhereUniqueInput
    create: XOR<turmaCreateWithoutProfessorInput, turmaUncheckedCreateWithoutProfessorInput>
  }

  export type turmaCreateManyProfessorInputEnvelope = {
    data: turmaCreateManyProfessorInput | turmaCreateManyProfessorInput[]
    skipDuplicates?: boolean
  }

  export type turmaUpsertWithWhereUniqueWithoutProfessorInput = {
    where: turmaWhereUniqueInput
    update: XOR<turmaUpdateWithoutProfessorInput, turmaUncheckedUpdateWithoutProfessorInput>
    create: XOR<turmaCreateWithoutProfessorInput, turmaUncheckedCreateWithoutProfessorInput>
  }

  export type turmaUpdateWithWhereUniqueWithoutProfessorInput = {
    where: turmaWhereUniqueInput
    data: XOR<turmaUpdateWithoutProfessorInput, turmaUncheckedUpdateWithoutProfessorInput>
  }

  export type turmaUpdateManyWithWhereWithoutProfessorInput = {
    where: turmaScalarWhereInput
    data: XOR<turmaUpdateManyMutationInput, turmaUncheckedUpdateManyWithoutProfessorInput>
  }

  export type turmaScalarWhereInput = {
    AND?: turmaScalarWhereInput | turmaScalarWhereInput[]
    OR?: turmaScalarWhereInput[]
    NOT?: turmaScalarWhereInput | turmaScalarWhereInput[]
    id?: IntFilter<"turma"> | number
    nome?: StringFilter<"turma"> | string
    arteMarcial?: StringNullableFilter<"turma"> | string | null
    professorId?: IntNullableFilter<"turma"> | number | null
  }

  export type matriculaCreateWithoutTurmaInput = {
    dataMatricula?: Date | string | null
    aluno: alunoCreateNestedOneWithoutMatriculaInput
  }

  export type matriculaUncheckedCreateWithoutTurmaInput = {
    id?: number
    alunoId: number
    dataMatricula?: Date | string | null
  }

  export type matriculaCreateOrConnectWithoutTurmaInput = {
    where: matriculaWhereUniqueInput
    create: XOR<matriculaCreateWithoutTurmaInput, matriculaUncheckedCreateWithoutTurmaInput>
  }

  export type matriculaCreateManyTurmaInputEnvelope = {
    data: matriculaCreateManyTurmaInput | matriculaCreateManyTurmaInput[]
    skipDuplicates?: boolean
  }

  export type professorCreateWithoutTurmaInput = {
    nome: string
    email: string
    telefone?: string | null
    arteMarcial?: string | null
  }

  export type professorUncheckedCreateWithoutTurmaInput = {
    id?: number
    nome: string
    email: string
    telefone?: string | null
    arteMarcial?: string | null
  }

  export type professorCreateOrConnectWithoutTurmaInput = {
    where: professorWhereUniqueInput
    create: XOR<professorCreateWithoutTurmaInput, professorUncheckedCreateWithoutTurmaInput>
  }

  export type matriculaUpsertWithWhereUniqueWithoutTurmaInput = {
    where: matriculaWhereUniqueInput
    update: XOR<matriculaUpdateWithoutTurmaInput, matriculaUncheckedUpdateWithoutTurmaInput>
    create: XOR<matriculaCreateWithoutTurmaInput, matriculaUncheckedCreateWithoutTurmaInput>
  }

  export type matriculaUpdateWithWhereUniqueWithoutTurmaInput = {
    where: matriculaWhereUniqueInput
    data: XOR<matriculaUpdateWithoutTurmaInput, matriculaUncheckedUpdateWithoutTurmaInput>
  }

  export type matriculaUpdateManyWithWhereWithoutTurmaInput = {
    where: matriculaScalarWhereInput
    data: XOR<matriculaUpdateManyMutationInput, matriculaUncheckedUpdateManyWithoutTurmaInput>
  }

  export type professorUpsertWithoutTurmaInput = {
    update: XOR<professorUpdateWithoutTurmaInput, professorUncheckedUpdateWithoutTurmaInput>
    create: XOR<professorCreateWithoutTurmaInput, professorUncheckedCreateWithoutTurmaInput>
    where?: professorWhereInput
  }

  export type professorUpdateToOneWithWhereWithoutTurmaInput = {
    where?: professorWhereInput
    data: XOR<professorUpdateWithoutTurmaInput, professorUncheckedUpdateWithoutTurmaInput>
  }

  export type professorUpdateWithoutTurmaInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    arteMarcial?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type professorUncheckedUpdateWithoutTurmaInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    arteMarcial?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type matriculaCreateManyAlunoInput = {
    id?: number
    turmaId: number
    dataMatricula?: Date | string | null
  }

  export type matriculaUpdateWithoutAlunoInput = {
    dataMatricula?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    turma?: turmaUpdateOneRequiredWithoutMatriculaNestedInput
  }

  export type matriculaUncheckedUpdateWithoutAlunoInput = {
    id?: IntFieldUpdateOperationsInput | number
    turmaId?: IntFieldUpdateOperationsInput | number
    dataMatricula?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type matriculaUncheckedUpdateManyWithoutAlunoInput = {
    id?: IntFieldUpdateOperationsInput | number
    turmaId?: IntFieldUpdateOperationsInput | number
    dataMatricula?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type turmaCreateManyProfessorInput = {
    id?: number
    nome: string
    arteMarcial?: string | null
  }

  export type turmaUpdateWithoutProfessorInput = {
    nome?: StringFieldUpdateOperationsInput | string
    arteMarcial?: NullableStringFieldUpdateOperationsInput | string | null
    matricula?: matriculaUpdateManyWithoutTurmaNestedInput
  }

  export type turmaUncheckedUpdateWithoutProfessorInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    arteMarcial?: NullableStringFieldUpdateOperationsInput | string | null
    matricula?: matriculaUncheckedUpdateManyWithoutTurmaNestedInput
  }

  export type turmaUncheckedUpdateManyWithoutProfessorInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    arteMarcial?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type matriculaCreateManyTurmaInput = {
    id?: number
    alunoId: number
    dataMatricula?: Date | string | null
  }

  export type matriculaUpdateWithoutTurmaInput = {
    dataMatricula?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    aluno?: alunoUpdateOneRequiredWithoutMatriculaNestedInput
  }

  export type matriculaUncheckedUpdateWithoutTurmaInput = {
    id?: IntFieldUpdateOperationsInput | number
    alunoId?: IntFieldUpdateOperationsInput | number
    dataMatricula?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type matriculaUncheckedUpdateManyWithoutTurmaInput = {
    id?: IntFieldUpdateOperationsInput | number
    alunoId?: IntFieldUpdateOperationsInput | number
    dataMatricula?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}